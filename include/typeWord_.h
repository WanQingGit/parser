/*
 *  this is generated by code.
 *  If you want to modify, please modify the source code.
 *
 *  Author: WanQing<1109162935@qq.com>
 *
 *
 *  A table of symbol transfer
 *  char  string
 *  -------------
 *  '+' | "ADD"
 *  '.' | "DOT"
 *  '-' | "SUB"
 *  '*' | "MUL"
 *  '/' | "DIV"
 *  '%' | "MOD"
 *  '&' | "AND"
 *  '^' | "XOR"
 *  '!' | "INV"
 *  '?' | "QUE"
 *  '~' | "NOT"
 *  '{' | "BBL"
 *  '}' | "BBR"
 *  '[' | "MBL"
 *  ']' | "MBR"
 *  '(' | "SBL"
 *  ')' | "SBR"
 *  ',' | "COM"
 *  '$' | "END"
 *  ':' | "COL"
 *  'ε' | "NIL"
 *  '@' | "AT"
 *  '|' | "OR"
 *  '>' | "GT"
 *  '<' | "LT"
 *  '=' | "EQ"
 *  -------------
 */
#ifndef INCLUDE_TYPEWORD_H_
#define INCLUDE_TYPEWORD_H_
#define TFLAG (1<<20)

typedef enum {
	TW_START, // START
	TW_STAT, // STAT
	TW_NAME, // NAME
	TW_NUM, // NUM
	TW_BOOL, // BOOL
	TW_STRING, // STRING
	TW_END, // $
	TW_NULL, // NULL
	TW_NLINE, // NLINE
	TW_NIL, // ε
	TW_stats, // stats
	TW_atom1, // atom1
	TW_atom2, // atom2
	TW_SBL, // (
	TW_yield_expr, // yield_expr
	TW_testlist_comp, // testlist_comp
	TW_SBR, // )
	TW_atom3, // atom3
	TW_atom2_DOT_0, // atom2.0
	TW_BBL, // {
	TW_dictorsetmaker, // dictorsetmaker
	TW_BBR, // }
	TW_MBL, // [
	TW_MBR, // ]
	TW_atom3_DOT_0, // atom3.0
	TW_atom3_DOT_1, // atom3.1
	TW_test, // test
	TW_star_expr, // star_expr
	TW_comp_for, // comp_for
	TW_testlist_comp_DOT_0, // testlist_comp.0
	TW_testlist_comp_DOT_1, // testlist_comp.1
	TW_COM, // ,
	TW_testlist_comp_DOT_1_DOT_0, // testlist_comp.1.0
	TW_testlist_comp_DOT_2, // testlist_comp.2
	TW_atom_expr, // atom_expr
	TW_trailer, // trailer
	TW_var_expr, // var_expr
	TW_atom_expr_DOT_0, // atom_expr.0
	TW_atom_expr_DOT_1, // atom_expr.1
	TW_var_expr_DOT_0, // var_expr.0
	TW_arglist, // arglist
	TW_subscriptlist, // subscriptlist
	TW_DOT, // .
	TW_subscript, // subscript
	TW_subscriptlist_DOT_0, // subscriptlist.0
	TW_subscriptlist_DOT_1, // subscriptlist.1
	TW_COL, // :
	TW_sliceop, // sliceop
	TW_subscript_DOT_0, // subscript.0
	TW_subscript_DOT_1, // subscript.1
	TW_subscript_DOT_2, // subscript.2
	TW_dictorsetmaker1, // dictorsetmaker1
	TW_sliceop_DOT_0, // sliceop.0
	TW_MUL_MUL, // **
	TW_expr, // expr
	TW_dictorsetmaker1_DOT_0, // dictorsetmaker1.0
	TW_dictorsetmaker1_DOT_1, // dictorsetmaker1.1
	TW_dictorsetmaker2, // dictorsetmaker2
	TW_dictorsetmaker1_DOT_1_DOT_0, // dictorsetmaker1.1.0
	TW_dictorsetmaker1_DOT_1_DOT_0_DOT_0, // dictorsetmaker1.1.0.0
	TW_dictorsetmaker1_DOT_1_DOT_1, // dictorsetmaker1.1.1
	TW_dictorsetmaker2_DOT_0, // dictorsetmaker2.0
	TW_dictorsetmaker2_DOT_1, // dictorsetmaker2.1
	TW_dictorsetmaker2_DOT_1_DOT_0, // dictorsetmaker2.1.0
	TW_dictorsetmaker2_DOT_1_DOT_0_DOT_0, // dictorsetmaker2.1.0.0
	TW_dictorsetmaker2_DOT_1_DOT_1, // dictorsetmaker2.1.1
	TW_power, // power
	TW_factor, // factor
	TW_power_DOT_0, // power.0
	TW_ADD, // +
	TW_SUB, // -
	TW_NOT, // ~
	TW_term, // term
	TW_factor_DOT_0, // factor.0
	TW_MUL, // *
	TW_AT, // @
	TW_DIV, // /
	TW_MOD, // %
	TW_DIV_DIV, // //
	TW_arith_expr, // arith_expr
	TW_term_DOT_0, // term.0
	TW_term_DOT_0_DOT_0, // term.0.0
	TW_shift_expr, // shift_expr
	TW_arith_expr_DOT_0, // arith_expr.0
	TW_arith_expr_DOT_0_DOT_0, // arith_expr.0.0
	TW_LT_LT, // <<
	TW_GT_GT, // >>
	TW_and_expr, // and_expr
	TW_shift_expr_DOT_0, // shift_expr.0
	TW_shift_expr_DOT_0_DOT_0, // shift_expr.0.0
	TW_AND, // &
	TW_xor_expr, // xor_expr
	TW_and_expr_DOT_0, // and_expr.0
	TW_XOR, // ^
	TW_xor_expr_DOT_0, // xor_expr.0
	TW_OR, // |
	TW_comparison, // comparison
	TW_expr_DOT_0, // expr.0
	TW_comp_op, // comp_op
	TW_comparison_DOT_0, // comparison.0
	TW_LT, // <
	TW_GT, // >
	TW_EQ_EQ, // ==
	TW_GT_EQ, // >=
	TW_LT_EQ, // <=
	TW_LT_GT, // <>
	TW_INV_EQ, // !=
	TW_in, // in
	TW_not, // not
	TW_not_test, // not_test
	TW_and_test, // and_test
	TW_and, // and
	TW_or_test, // or_test
	TW_and_test_DOT_0, // and_test.0
	TW_or, // or
	TW_lambdef, // lambdef
	TW_or_test_DOT_0, // or_test.0
	TW_lambda, // lambda
	TW_argslist, // argslist
	TW_lambdef_DOT_0, // lambdef.0
	TW_test_nocond, // test_nocond
	TW_lambdef_nocond, // lambdef_nocond
	TW_lambdef_nocond_DOT_0, // lambdef_nocond.0
	TW_QUE, // ?
	TW_dotname, // dotname
	TW_test_DOT_0, // test.0
	TW_decorator, // decorator
	TW_dotname_DOT_0, // dotname.0
	TW_decorator_DOT_0, // decorator.0
	TW_decorators, // decorators
	TW_yield, // yield
	TW_yield_arg, // yield_arg
	TW_yield_expr_DOT_0, // yield_expr.0
	TW_from, // from
	TW_testlist, // testlist
	TW_async_funcdef, // async_funcdef
	TW_async, // async
	TW_funcdef, // funcdef
	TW_parameters, // parameters
	TW_parameters_DOT_0, // parameters.0
	TW_arg, // arg
	TW_argassign, // argassign
	TW_arg_DOT_0, // arg.0
	TW_EQ, // =
	TW_argbase, // argbase
	TW_argbase_DOT_0, // argbase.0
	TW_argbase_DOT_1, // argbase.1
	TW_argnotbase, // argnotbase
	TW_argone, // argone
	TW_argtwo, // argtwo
	TW_argbase_DOT_1_DOT_0, // argbase.1.0
	TW_argnotbase_DOT_0, // argnotbase.0
	TW_argnotbase_DOT_1, // argnotbase.1
	TW_argnotbase_DOT_1_DOT_0, // argnotbase.1.0
	TW_argone_DOT_0, // argone.0
	TW_argone_DOT_1, // argone.1
	TW_block_stats, // block_stats
	TW_block_head, // block_head
	TW_block, // block
	TW_class_stats, // class_stats
	TW_stats_DOT_0, // stats.0
	TW_stats_DOT_1, // stats.1
	TW_stats_DOT_2, // stats.2
	TW_inclass_stmt, // inclass_stmt
	TW_loop_stats, // loop_stats
	TW_class_stats_DOT_0, // class_stats.0
	TW_class_stats_DOT_1, // class_stats.1
	TW_class_stats_DOT_2, // class_stats.2
	TW_inloop_stmt, // inloop_stmt
	TW_loop_stats_DOT_0, // loop_stats.0
	TW_loop_stats_DOT_1, // loop_stats.1
	TW_loop_stats_DOT_2, // loop_stats.2
	TW_simple_stmt, // simple_stmt
	TW_compound_stmt, // compound_stmt
	TW_assign_stmt, // assign_stmt
	TW_del_stmt, // del_stmt
	TW_flow_stmt, // flow_stmt
	TW_vardef, // vardef
	TW_import_stmt, // import_stmt
	TW_assert_stmt, // assert_stmt
	TW_call_stmt, // call_stmt
	TW_varlist, // varlist
	TW_varlist_DOT_0, // varlist.0
	TW_varlist_DOT_1, // varlist.1
	TW_varlist_DOT_1_DOT_0, // varlist.1.0
	TW_augassign, // augassign
	TW_assign_stmt_DOT_0, // assign_stmt.0
	TW_assign_stmt_DOT_0_DOT_0, // assign_stmt.0.0
	TW_assign, // assign
	TW_assign_stmt_DOT_0_DOT_1, // assign_stmt.0.1
	TW_assign_DOT_0, // assign.0
	TW_test_star_list, // test_star_list
	TW_ADD_EQ, // +=
	TW_SUB_EQ, // -=
	TW_MUL_EQ, // *=
	TW_AT_EQ, // @=
	TW_DIV_EQ, // /=
	TW_MOD_EQ, // %=
	TW_AND_EQ, // &=
	TW_OR_EQ, // |=
	TW_XOR_EQ, // ^=
	TW_LT_LT_EQ, // <<=
	TW_GT_GT_EQ, // >>=
	TW_MUL_MUL_EQ, // **=
	TW_DIV_DIV_EQ, // //=
	TW_test_star_list_DOT_0, // test_star_list.0
	TW_test_star_list_DOT_1, // test_star_list.1
	TW_test_star_list_DOT_1_DOT_0, // test_star_list.1.0
	TW_test_star_list_DOT_2, // test_star_list.2
	TW_del, // del
	TW_exprlist, // exprlist
	TW_exprlist_DOT_0, // exprlist.0
	TW_exprlist_DOT_1, // exprlist.1
	TW_exprlist_DOT_1_DOT_0, // exprlist.1.0
	TW_exprlist_DOT_2, // exprlist.2
	TW_break_stmt, // break_stmt
	TW_continue_stmt, // continue_stmt
	TW_methdef, // methdef
	TW_return_stmt, // return_stmt
	TW_raise_stmt, // raise_stmt
	TW_yield_stmt, // yield_stmt
	TW_break, // break
	TW_continue, // continue
	TW_return, // return
	TW_return_stmt_DOT_0, // return_stmt.0
	TW_raise, // raise
	TW_raise_stmt_DOT_0, // raise_stmt.0
	TW_raise_stmt_DOT_0_DOT_0, // raise_stmt.0.0
	TW_import, // import
	TW_import_stmt_DOT_0, // import_stmt.0
	TW_namelist, // namelist
	TW_import_stmt_DOT_1, // import_stmt.1
	TW_as, // as
	TW_annname, // annname
	TW_varname, // varname
	TW_annname_DOT_0, // annname.0
	TW_varname_DOT_0, // varname.0
	TW_var, // var
	TW_global, // global
	TW_extern, // extern
	TW_vardef_DOT_0, // vardef.0
	TW_vardef_DOT_1, // vardef.1
	TW_nonlocal_stmt, // nonlocal_stmt
	TW_assert, // assert
	TW_assert_stmt_DOT_0, // assert_stmt.0
	TW_if_stmt, // if_stmt
	TW_while_stmt, // while_stmt
	TW_for_stmt, // for_stmt
	TW_try_stmt, // try_stmt
	TW_with_stmt, // with_stmt
	TW_classdef, // classdef
	TW_decorated, // decorated
	TW_async_stmt, // async_stmt
	TW_condition, // condition
	TW_if_block, // if_block
	TW_else_prefix, // else_prefix
	TW_else, // else
	TW_if_else_block, // if_else_block
	TW_if, // if
	TW_if_stmt_DOT_0, // if_stmt.0
	TW_elif, // elif
	TW_if_stmt_DOT_1, // if_stmt.1
	TW_while_cond, // while_cond
	TW_loop_block, // loop_block
	TW_while_block, // while_block
	TW_while_else_block, // while_else_block
	TW_while, // while
	TW_while_stmt_DOT_0, // while_stmt.0
	TW_for, // for
	TW_for_stmt_DOT_0, // for_stmt.0
	TW_testlist_DOT_0, // testlist.0
	TW_testlist_DOT_1, // testlist.1
	TW_try_head, // try_head
	TW_try, // try
	TW_try_else, // try_else
	TW_catch_block, // catch_block
	TW_except_clause, // except_clause
	TW_except, // except
	TW_except_clause_DOT_0, // except_clause.0
	TW_except_clause_DOT_0_DOT_0, // except_clause.0.0
	TW_try_stmt_DOT_0, // try_stmt.0
	TW_finally, // finally
	TW_try_stmt_DOT_0_DOT_0, // try_stmt.0.0
	TW_try_stmt_DOT_0_DOT_1, // try_stmt.0.1
	TW_try_stmt_DOT_0_DOT_2, // try_stmt.0.2
	TW_with, // with
	TW_with_item, // with_item
	TW_with_stmt_DOT_0, // with_stmt.0
	TW_func_head, // func_head
	TW_with_item_DOT_0, // with_item.0
	TW_func, // func
	TW_meth_head, // meth_head
	TW_static, // static
	TW_meth_head_DOT_0, // meth_head.0
	TW_def, // def
	TW_class_head, // class_head
	TW_class_head_DOT_0, // class_head.0
	TW_class, // class
	TW_argument, // argument
	TW_arglist_DOT_0, // arglist.0
	TW_arglist_DOT_0_DOT_0, // arglist.0.0
	TW_comp_iter, // comp_iter
	TW_argument_DOT_0, // argument.0
	TW_comp_if, // comp_if
	TW_sync_comp_for, // sync_comp_for
	TW_sync_comp_for_DOT_0, // sync_comp_for.0
	TW_comp_for_DOT_0, // comp_for.0
	TW_comp_if_DOT_0, // comp_if.0
	TW_decorated_DOT_0, // decorated.0
	TW_async_stmt_DOT_0, // async_stmt.0
} TypeWord;

typedef enum {
	WI_START = TW_START, // START
	WI_STAT = TW_STAT, // STAT
	WI_stats = TW_stats, // stats
	WI_atom1 = TW_atom1, // atom1
	WI_atom2 = TW_atom2, // atom2
	WI_yield_expr = TW_yield_expr, // yield_expr
	WI_testlist_comp = TW_testlist_comp, // testlist_comp
	WI_atom3 = TW_atom3, // atom3
	WI_atom2_DOT_0 = TW_atom2_DOT_0, // atom2.0
	WI_dictorsetmaker = TW_dictorsetmaker, // dictorsetmaker
	WI_atom3_DOT_0 = TW_atom3_DOT_0, // atom3.0
	WI_atom3_DOT_1 = TW_atom3_DOT_1, // atom3.1
	WI_test = TW_test, // test
	WI_star_expr = TW_star_expr, // star_expr
	WI_comp_for = TW_comp_for, // comp_for
	WI_testlist_comp_DOT_0 = TW_testlist_comp_DOT_0, // testlist_comp.0
	WI_testlist_comp_DOT_1 = TW_testlist_comp_DOT_1, // testlist_comp.1
	WI_testlist_comp_DOT_1_DOT_0 = TW_testlist_comp_DOT_1_DOT_0, // testlist_comp.1.0
	WI_testlist_comp_DOT_2 = TW_testlist_comp_DOT_2, // testlist_comp.2
	WI_atom_expr = TW_atom_expr, // atom_expr
	WI_trailer = TW_trailer, // trailer
	WI_var_expr = TW_var_expr, // var_expr
	WI_atom_expr_DOT_0 = TW_atom_expr_DOT_0, // atom_expr.0
	WI_atom_expr_DOT_1 = TW_atom_expr_DOT_1, // atom_expr.1
	WI_var_expr_DOT_0 = TW_var_expr_DOT_0, // var_expr.0
	WI_arglist = TW_arglist, // arglist
	WI_subscriptlist = TW_subscriptlist, // subscriptlist
	WI_subscript = TW_subscript, // subscript
	WI_subscriptlist_DOT_0 = TW_subscriptlist_DOT_0, // subscriptlist.0
	WI_subscriptlist_DOT_1 = TW_subscriptlist_DOT_1, // subscriptlist.1
	WI_sliceop = TW_sliceop, // sliceop
	WI_subscript_DOT_0 = TW_subscript_DOT_0, // subscript.0
	WI_subscript_DOT_1 = TW_subscript_DOT_1, // subscript.1
	WI_subscript_DOT_2 = TW_subscript_DOT_2, // subscript.2
	WI_dictorsetmaker1 = TW_dictorsetmaker1, // dictorsetmaker1
	WI_sliceop_DOT_0 = TW_sliceop_DOT_0, // sliceop.0
	WI_expr = TW_expr, // expr
	WI_dictorsetmaker1_DOT_0 = TW_dictorsetmaker1_DOT_0, // dictorsetmaker1.0
	WI_dictorsetmaker1_DOT_1 = TW_dictorsetmaker1_DOT_1, // dictorsetmaker1.1
	WI_dictorsetmaker2 = TW_dictorsetmaker2, // dictorsetmaker2
	WI_dictorsetmaker1_DOT_1_DOT_0 = TW_dictorsetmaker1_DOT_1_DOT_0, // dictorsetmaker1.1.0
	WI_dictorsetmaker1_DOT_1_DOT_0_DOT_0 = TW_dictorsetmaker1_DOT_1_DOT_0_DOT_0, // dictorsetmaker1.1.0.0
	WI_dictorsetmaker1_DOT_1_DOT_1 = TW_dictorsetmaker1_DOT_1_DOT_1, // dictorsetmaker1.1.1
	WI_dictorsetmaker2_DOT_0 = TW_dictorsetmaker2_DOT_0, // dictorsetmaker2.0
	WI_dictorsetmaker2_DOT_1 = TW_dictorsetmaker2_DOT_1, // dictorsetmaker2.1
	WI_dictorsetmaker2_DOT_1_DOT_0 = TW_dictorsetmaker2_DOT_1_DOT_0, // dictorsetmaker2.1.0
	WI_dictorsetmaker2_DOT_1_DOT_0_DOT_0 = TW_dictorsetmaker2_DOT_1_DOT_0_DOT_0, // dictorsetmaker2.1.0.0
	WI_dictorsetmaker2_DOT_1_DOT_1 = TW_dictorsetmaker2_DOT_1_DOT_1, // dictorsetmaker2.1.1
	WI_power = TW_power, // power
	WI_factor = TW_factor, // factor
	WI_power_DOT_0 = TW_power_DOT_0, // power.0
	WI_term = TW_term, // term
	WI_factor_DOT_0 = TW_factor_DOT_0, // factor.0
	WI_arith_expr = TW_arith_expr, // arith_expr
	WI_term_DOT_0 = TW_term_DOT_0, // term.0
	WI_term_DOT_0_DOT_0 = TW_term_DOT_0_DOT_0, // term.0.0
	WI_shift_expr = TW_shift_expr, // shift_expr
	WI_arith_expr_DOT_0 = TW_arith_expr_DOT_0, // arith_expr.0
	WI_arith_expr_DOT_0_DOT_0 = TW_arith_expr_DOT_0_DOT_0, // arith_expr.0.0
	WI_and_expr = TW_and_expr, // and_expr
	WI_shift_expr_DOT_0 = TW_shift_expr_DOT_0, // shift_expr.0
	WI_shift_expr_DOT_0_DOT_0 = TW_shift_expr_DOT_0_DOT_0, // shift_expr.0.0
	WI_xor_expr = TW_xor_expr, // xor_expr
	WI_and_expr_DOT_0 = TW_and_expr_DOT_0, // and_expr.0
	WI_xor_expr_DOT_0 = TW_xor_expr_DOT_0, // xor_expr.0
	WI_comparison = TW_comparison, // comparison
	WI_expr_DOT_0 = TW_expr_DOT_0, // expr.0
	WI_comp_op = TW_comp_op, // comp_op
	WI_comparison_DOT_0 = TW_comparison_DOT_0, // comparison.0
	WI_not_test = TW_not_test, // not_test
	WI_and_test = TW_and_test, // and_test
	WI_or_test = TW_or_test, // or_test
	WI_and_test_DOT_0 = TW_and_test_DOT_0, // and_test.0
	WI_lambdef = TW_lambdef, // lambdef
	WI_or_test_DOT_0 = TW_or_test_DOT_0, // or_test.0
	WI_argslist = TW_argslist, // argslist
	WI_lambdef_DOT_0 = TW_lambdef_DOT_0, // lambdef.0
	WI_test_nocond = TW_test_nocond, // test_nocond
	WI_lambdef_nocond = TW_lambdef_nocond, // lambdef_nocond
	WI_lambdef_nocond_DOT_0 = TW_lambdef_nocond_DOT_0, // lambdef_nocond.0
	WI_dotname = TW_dotname, // dotname
	WI_test_DOT_0 = TW_test_DOT_0, // test.0
	WI_decorator = TW_decorator, // decorator
	WI_dotname_DOT_0 = TW_dotname_DOT_0, // dotname.0
	WI_decorator_DOT_0 = TW_decorator_DOT_0, // decorator.0
	WI_decorators = TW_decorators, // decorators
	WI_yield_arg = TW_yield_arg, // yield_arg
	WI_yield_expr_DOT_0 = TW_yield_expr_DOT_0, // yield_expr.0
	WI_testlist = TW_testlist, // testlist
	WI_async_funcdef = TW_async_funcdef, // async_funcdef
	WI_funcdef = TW_funcdef, // funcdef
	WI_parameters = TW_parameters, // parameters
	WI_parameters_DOT_0 = TW_parameters_DOT_0, // parameters.0
	WI_arg = TW_arg, // arg
	WI_argassign = TW_argassign, // argassign
	WI_arg_DOT_0 = TW_arg_DOT_0, // arg.0
	WI_argbase = TW_argbase, // argbase
	WI_argbase_DOT_0 = TW_argbase_DOT_0, // argbase.0
	WI_argbase_DOT_1 = TW_argbase_DOT_1, // argbase.1
	WI_argnotbase = TW_argnotbase, // argnotbase
	WI_argone = TW_argone, // argone
	WI_argtwo = TW_argtwo, // argtwo
	WI_argbase_DOT_1_DOT_0 = TW_argbase_DOT_1_DOT_0, // argbase.1.0
	WI_argnotbase_DOT_0 = TW_argnotbase_DOT_0, // argnotbase.0
	WI_argnotbase_DOT_1 = TW_argnotbase_DOT_1, // argnotbase.1
	WI_argnotbase_DOT_1_DOT_0 = TW_argnotbase_DOT_1_DOT_0, // argnotbase.1.0
	WI_argone_DOT_0 = TW_argone_DOT_0, // argone.0
	WI_argone_DOT_1 = TW_argone_DOT_1, // argone.1
	WI_block_stats = TW_block_stats, // block_stats
	WI_block_head = TW_block_head, // block_head
	WI_block = TW_block, // block
	WI_class_stats = TW_class_stats, // class_stats
	WI_stats_DOT_0 = TW_stats_DOT_0, // stats.0
	WI_stats_DOT_1 = TW_stats_DOT_1, // stats.1
	WI_stats_DOT_2 = TW_stats_DOT_2, // stats.2
	WI_inclass_stmt = TW_inclass_stmt, // inclass_stmt
	WI_loop_stats = TW_loop_stats, // loop_stats
	WI_class_stats_DOT_0 = TW_class_stats_DOT_0, // class_stats.0
	WI_class_stats_DOT_1 = TW_class_stats_DOT_1, // class_stats.1
	WI_class_stats_DOT_2 = TW_class_stats_DOT_2, // class_stats.2
	WI_inloop_stmt = TW_inloop_stmt, // inloop_stmt
	WI_loop_stats_DOT_0 = TW_loop_stats_DOT_0, // loop_stats.0
	WI_loop_stats_DOT_1 = TW_loop_stats_DOT_1, // loop_stats.1
	WI_loop_stats_DOT_2 = TW_loop_stats_DOT_2, // loop_stats.2
	WI_simple_stmt = TW_simple_stmt, // simple_stmt
	WI_compound_stmt = TW_compound_stmt, // compound_stmt
	WI_assign_stmt = TW_assign_stmt, // assign_stmt
	WI_del_stmt = TW_del_stmt, // del_stmt
	WI_flow_stmt = TW_flow_stmt, // flow_stmt
	WI_vardef = TW_vardef, // vardef
	WI_import_stmt = TW_import_stmt, // import_stmt
	WI_assert_stmt = TW_assert_stmt, // assert_stmt
	WI_call_stmt = TW_call_stmt, // call_stmt
	WI_varlist = TW_varlist, // varlist
	WI_varlist_DOT_0 = TW_varlist_DOT_0, // varlist.0
	WI_varlist_DOT_1 = TW_varlist_DOT_1, // varlist.1
	WI_varlist_DOT_1_DOT_0 = TW_varlist_DOT_1_DOT_0, // varlist.1.0
	WI_augassign = TW_augassign, // augassign
	WI_assign_stmt_DOT_0 = TW_assign_stmt_DOT_0, // assign_stmt.0
	WI_assign_stmt_DOT_0_DOT_0 = TW_assign_stmt_DOT_0_DOT_0, // assign_stmt.0.0
	WI_assign = TW_assign, // assign
	WI_assign_stmt_DOT_0_DOT_1 = TW_assign_stmt_DOT_0_DOT_1, // assign_stmt.0.1
	WI_assign_DOT_0 = TW_assign_DOT_0, // assign.0
	WI_test_star_list = TW_test_star_list, // test_star_list
	WI_test_star_list_DOT_0 = TW_test_star_list_DOT_0, // test_star_list.0
	WI_test_star_list_DOT_1 = TW_test_star_list_DOT_1, // test_star_list.1
	WI_test_star_list_DOT_1_DOT_0 = TW_test_star_list_DOT_1_DOT_0, // test_star_list.1.0
	WI_test_star_list_DOT_2 = TW_test_star_list_DOT_2, // test_star_list.2
	WI_exprlist = TW_exprlist, // exprlist
	WI_exprlist_DOT_0 = TW_exprlist_DOT_0, // exprlist.0
	WI_exprlist_DOT_1 = TW_exprlist_DOT_1, // exprlist.1
	WI_exprlist_DOT_1_DOT_0 = TW_exprlist_DOT_1_DOT_0, // exprlist.1.0
	WI_exprlist_DOT_2 = TW_exprlist_DOT_2, // exprlist.2
	WI_break_stmt = TW_break_stmt, // break_stmt
	WI_continue_stmt = TW_continue_stmt, // continue_stmt
	WI_methdef = TW_methdef, // methdef
	WI_return_stmt = TW_return_stmt, // return_stmt
	WI_raise_stmt = TW_raise_stmt, // raise_stmt
	WI_yield_stmt = TW_yield_stmt, // yield_stmt
	WI_return_stmt_DOT_0 = TW_return_stmt_DOT_0, // return_stmt.0
	WI_raise_stmt_DOT_0 = TW_raise_stmt_DOT_0, // raise_stmt.0
	WI_raise_stmt_DOT_0_DOT_0 = TW_raise_stmt_DOT_0_DOT_0, // raise_stmt.0.0
	WI_import_stmt_DOT_0 = TW_import_stmt_DOT_0, // import_stmt.0
	WI_namelist = TW_namelist, // namelist
	WI_import_stmt_DOT_1 = TW_import_stmt_DOT_1, // import_stmt.1
	WI_annname = TW_annname, // annname
	WI_varname = TW_varname, // varname
	WI_annname_DOT_0 = TW_annname_DOT_0, // annname.0
	WI_varname_DOT_0 = TW_varname_DOT_0, // varname.0
	WI_vardef_DOT_0 = TW_vardef_DOT_0, // vardef.0
	WI_vardef_DOT_1 = TW_vardef_DOT_1, // vardef.1
	WI_nonlocal_stmt = TW_nonlocal_stmt, // nonlocal_stmt
	WI_assert_stmt_DOT_0 = TW_assert_stmt_DOT_0, // assert_stmt.0
	WI_if_stmt = TW_if_stmt, // if_stmt
	WI_while_stmt = TW_while_stmt, // while_stmt
	WI_for_stmt = TW_for_stmt, // for_stmt
	WI_try_stmt = TW_try_stmt, // try_stmt
	WI_with_stmt = TW_with_stmt, // with_stmt
	WI_classdef = TW_classdef, // classdef
	WI_decorated = TW_decorated, // decorated
	WI_async_stmt = TW_async_stmt, // async_stmt
	WI_condition = TW_condition, // condition
	WI_if_block = TW_if_block, // if_block
	WI_else_prefix = TW_else_prefix, // else_prefix
	WI_if_else_block = TW_if_else_block, // if_else_block
	WI_if_stmt_DOT_0 = TW_if_stmt_DOT_0, // if_stmt.0
	WI_if_stmt_DOT_1 = TW_if_stmt_DOT_1, // if_stmt.1
	WI_while_cond = TW_while_cond, // while_cond
	WI_loop_block = TW_loop_block, // loop_block
	WI_while_block = TW_while_block, // while_block
	WI_while_else_block = TW_while_else_block, // while_else_block
	WI_while_stmt_DOT_0 = TW_while_stmt_DOT_0, // while_stmt.0
	WI_for_stmt_DOT_0 = TW_for_stmt_DOT_0, // for_stmt.0
	WI_testlist_DOT_0 = TW_testlist_DOT_0, // testlist.0
	WI_testlist_DOT_1 = TW_testlist_DOT_1, // testlist.1
	WI_try_head = TW_try_head, // try_head
	WI_try_else = TW_try_else, // try_else
	WI_catch_block = TW_catch_block, // catch_block
	WI_except_clause = TW_except_clause, // except_clause
	WI_except_clause_DOT_0 = TW_except_clause_DOT_0, // except_clause.0
	WI_except_clause_DOT_0_DOT_0 = TW_except_clause_DOT_0_DOT_0, // except_clause.0.0
	WI_try_stmt_DOT_0 = TW_try_stmt_DOT_0, // try_stmt.0
	WI_try_stmt_DOT_0_DOT_0 = TW_try_stmt_DOT_0_DOT_0, // try_stmt.0.0
	WI_try_stmt_DOT_0_DOT_1 = TW_try_stmt_DOT_0_DOT_1, // try_stmt.0.1
	WI_try_stmt_DOT_0_DOT_2 = TW_try_stmt_DOT_0_DOT_2, // try_stmt.0.2
	WI_with_item = TW_with_item, // with_item
	WI_with_stmt_DOT_0 = TW_with_stmt_DOT_0, // with_stmt.0
	WI_func_head = TW_func_head, // func_head
	WI_with_item_DOT_0 = TW_with_item_DOT_0, // with_item.0
	WI_meth_head = TW_meth_head, // meth_head
	WI_meth_head_DOT_0 = TW_meth_head_DOT_0, // meth_head.0
	WI_class_head = TW_class_head, // class_head
	WI_class_head_DOT_0 = TW_class_head_DOT_0, // class_head.0
	WI_argument = TW_argument, // argument
	WI_arglist_DOT_0 = TW_arglist_DOT_0, // arglist.0
	WI_arglist_DOT_0_DOT_0 = TW_arglist_DOT_0_DOT_0, // arglist.0.0
	WI_comp_iter = TW_comp_iter, // comp_iter
	WI_argument_DOT_0 = TW_argument_DOT_0, // argument.0
	WI_comp_if = TW_comp_if, // comp_if
	WI_sync_comp_for = TW_sync_comp_for, // sync_comp_for
	WI_sync_comp_for_DOT_0 = TW_sync_comp_for_DOT_0, // sync_comp_for.0
	WI_comp_for_DOT_0 = TW_comp_for_DOT_0, // comp_for.0
	WI_comp_if_DOT_0 = TW_comp_if_DOT_0, // comp_if.0
	WI_decorated_DOT_0 = TW_decorated_DOT_0, // decorated.0
	WI_async_stmt_DOT_0 = TW_async_stmt_DOT_0, // async_stmt.0
	WI_NAME = TFLAG | TW_NAME, // NAME
	WI_NUM = TFLAG | TW_NUM, // NUM
	WI_BOOL = TFLAG | TW_BOOL, // BOOL
	WI_STRING = TFLAG | TW_STRING, // STRING
	WI_END = TFLAG | TW_END, // $
	WI_NULL = TFLAG | TW_NULL, // NULL
	WI_NLINE = TFLAG | TW_NLINE, // NLINE
	WI_NIL = TFLAG | TW_NIL, // ε
	WI_SBL = TFLAG | TW_SBL, // (
	WI_SBR = TFLAG | TW_SBR, // )
	WI_BBL = TFLAG | TW_BBL, // {
	WI_BBR = TFLAG | TW_BBR, // }
	WI_MBL = TFLAG | TW_MBL, // [
	WI_MBR = TFLAG | TW_MBR, // ]
	WI_COM = TFLAG | TW_COM, // ,
	WI_DOT = TFLAG | TW_DOT, // .
	WI_COL = TFLAG | TW_COL, // :
	WI_MUL_MUL = TFLAG | TW_MUL_MUL, // **
	WI_ADD = TFLAG | TW_ADD, // +
	WI_SUB = TFLAG | TW_SUB, // -
	WI_NOT = TFLAG | TW_NOT, // ~
	WI_MUL = TFLAG | TW_MUL, // *
	WI_AT = TFLAG | TW_AT, // @
	WI_DIV = TFLAG | TW_DIV, // /
	WI_MOD = TFLAG | TW_MOD, // %
	WI_DIV_DIV = TFLAG | TW_DIV_DIV, // //
	WI_LT_LT = TFLAG | TW_LT_LT, // <<
	WI_GT_GT = TFLAG | TW_GT_GT, // >>
	WI_AND = TFLAG | TW_AND, // &
	WI_XOR = TFLAG | TW_XOR, // ^
	WI_OR = TFLAG | TW_OR, // |
	WI_LT = TFLAG | TW_LT, // <
	WI_GT = TFLAG | TW_GT, // >
	WI_EQ_EQ = TFLAG | TW_EQ_EQ, // ==
	WI_GT_EQ = TFLAG | TW_GT_EQ, // >=
	WI_LT_EQ = TFLAG | TW_LT_EQ, // <=
	WI_LT_GT = TFLAG | TW_LT_GT, // <>
	WI_INV_EQ = TFLAG | TW_INV_EQ, // !=
	WI_in = TFLAG | TW_in, // in
	WI_not = TFLAG | TW_not, // not
	WI_and = TFLAG | TW_and, // and
	WI_or = TFLAG | TW_or, // or
	WI_lambda = TFLAG | TW_lambda, // lambda
	WI_QUE = TFLAG | TW_QUE, // ?
	WI_yield = TFLAG | TW_yield, // yield
	WI_from = TFLAG | TW_from, // from
	WI_async = TFLAG | TW_async, // async
	WI_EQ = TFLAG | TW_EQ, // =
	WI_ADD_EQ = TFLAG | TW_ADD_EQ, // +=
	WI_SUB_EQ = TFLAG | TW_SUB_EQ, // -=
	WI_MUL_EQ = TFLAG | TW_MUL_EQ, // *=
	WI_AT_EQ = TFLAG | TW_AT_EQ, // @=
	WI_DIV_EQ = TFLAG | TW_DIV_EQ, // /=
	WI_MOD_EQ = TFLAG | TW_MOD_EQ, // %=
	WI_AND_EQ = TFLAG | TW_AND_EQ, // &=
	WI_OR_EQ = TFLAG | TW_OR_EQ, // |=
	WI_XOR_EQ = TFLAG | TW_XOR_EQ, // ^=
	WI_LT_LT_EQ = TFLAG | TW_LT_LT_EQ, // <<=
	WI_GT_GT_EQ = TFLAG | TW_GT_GT_EQ, // >>=
	WI_MUL_MUL_EQ = TFLAG | TW_MUL_MUL_EQ, // **=
	WI_DIV_DIV_EQ = TFLAG | TW_DIV_DIV_EQ, // //=
	WI_del = TFLAG | TW_del, // del
	WI_break = TFLAG | TW_break, // break
	WI_continue = TFLAG | TW_continue, // continue
	WI_return = TFLAG | TW_return, // return
	WI_raise = TFLAG | TW_raise, // raise
	WI_import = TFLAG | TW_import, // import
	WI_as = TFLAG | TW_as, // as
	WI_var = TFLAG | TW_var, // var
	WI_global = TFLAG | TW_global, // global
	WI_extern = TFLAG | TW_extern, // extern
	WI_assert = TFLAG | TW_assert, // assert
	WI_else = TFLAG | TW_else, // else
	WI_if = TFLAG | TW_if, // if
	WI_elif = TFLAG | TW_elif, // elif
	WI_while = TFLAG | TW_while, // while
	WI_for = TFLAG | TW_for, // for
	WI_try = TFLAG | TW_try, // try
	WI_except = TFLAG | TW_except, // except
	WI_finally = TFLAG | TW_finally, // finally
	WI_with = TFLAG | TW_with, // with
	WI_func = TFLAG | TW_func, // func
	WI_static = TFLAG | TW_static, // static
	WI_def = TFLAG | TW_def, // def
	WI_class = TFLAG | TW_class, // class
} WordID;

#endif /* INCLUDE_TYPEWORD_H_ */