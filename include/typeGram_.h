/*
 *
 *  this is generated by code.
 *  If you want to modify, please modify the source code.
 *  
 *  Author: WanQing<1109162935@qq.com>
 */

#ifndef INCLUDE_TYPEGRAM_H_
#define INCLUDE_TYPEGRAM_H_

typedef enum {
  TG_START,		// START: stats  
  TG_atom1_0,		// atom1: NUM  
  TG_atom1_1,		// atom1: STRING  
  TG_atom1_2,		// atom1: BOOL  
  TG_atom1_3,		// atom1: NULL  
  TG_atom2_0,		// atom2: NAME  
  TG_atom2_D0_0,		// atom2.0: ε  
  TG_atom2_D0_1,		// atom2.0: yield_expr  
  TG_atom2_D0_2,		// atom2.0: testlist_comp  
  TG_atom2_1,		// atom2: '(' atom2.0  ')' 
  TG_atom3_D0_0,		// atom3.0: ε  
  TG_atom3_D0_1,		// atom3.0: dictorsetmaker  
  TG_atom3_0,		// atom3: '{' atom3.0  '}' 
  TG_atom3_D1_0,		// atom3.1: ε  
  TG_atom3_D1_1,		// atom3.1: testlist_comp  
  TG_atom3_1,		// atom3: '[' atom3.1  ']' 
  TG_testlist_comp_D0_0,		// testlist_comp.0: test  
  TG_testlist_comp_D0_1,		// testlist_comp.0: star_expr  
  TG_testlist_comp_D1_0,		// testlist_comp.1: comp_for  
  TG_testlist_comp_D1_1,		// testlist_comp.1: ε  
  TG_testlist_comp_D1_D0_0,		// testlist_comp.1.0: test  
  TG_testlist_comp_D1_D0_1,		// testlist_comp.1.0: star_expr  
  TG_testlist_comp_D1_2,		// testlist_comp.1: ',' testlist_comp.1.0  
  TG_testlist_comp_D1_3,		// testlist_comp.1: testlist_comp.1  ',' testlist_comp.1.0  
  TG_testlist_comp_D2_0,		// testlist_comp.2: ε  
  TG_testlist_comp_D2_1,		// testlist_comp.2: ',' 
  TG_testlist_comp,		// testlist_comp: testlist_comp.0  testlist_comp.1  testlist_comp.2  
  TG_atom_expr_D0_0,		// atom_expr.0: atom2  
  TG_atom_expr_D0_1,		// atom_expr.0: atom3  
  TG_atom_expr_D1_0,		// atom_expr.1: ε  
  TG_atom_expr_D1_1,		// atom_expr.1: trailer  
  TG_atom_expr_D1_2,		// atom_expr.1: atom_expr.1  trailer  
  TG_atom_expr_0,		// atom_expr: atom_expr.0  atom_expr.1  
  TG_atom_expr_1,		// atom_expr: atom1  
  TG_var_expr_D0_0,		// var_expr.0: ε  
  TG_var_expr_D0_1,		// var_expr.0: trailer  
  TG_var_expr_D0_2,		// var_expr.0: var_expr.0  trailer  
  TG_var_expr,		// var_expr: atom2  var_expr.0  
  TG_trailer_0,		// trailer: arglist  
  TG_trailer_1,		// trailer: '[' subscriptlist  ']' 
  TG_trailer_2,		// trailer: '.' NAME  
  TG_subscriptlist_D0_0,		// subscriptlist.0: ε  
  TG_subscriptlist_D0_1,		// subscriptlist.0: ',' subscript  
  TG_subscriptlist_D0_2,		// subscriptlist.0: subscriptlist.0  ',' subscript  
  TG_subscriptlist_D1_0,		// subscriptlist.1: ε  
  TG_subscriptlist_D1_1,		// subscriptlist.1: ',' 
  TG_subscriptlist,		// subscriptlist: subscript  subscriptlist.0  subscriptlist.1  
  TG_subscript_0,		// subscript: test  
  TG_subscript_D0_0,		// subscript.0: ε  
  TG_subscript_D0_1,		// subscript.0: test  
  TG_subscript_D1_0,		// subscript.1: ε  
  TG_subscript_D1_1,		// subscript.1: test  
  TG_subscript_D2_0,		// subscript.2: ε  
  TG_subscript_D2_1,		// subscript.2: sliceop  
  TG_subscript_1,		// subscript: subscript.0  ':' subscript.1  subscript.2  
  TG_sliceop_D0_0,		// sliceop.0: ε  
  TG_sliceop_D0_1,		// sliceop.0: test  
  TG_sliceop,		// sliceop: ':' sliceop.0  
  TG_dictorsetmaker1_D0_0,		// dictorsetmaker1.0: test  ':' test  
  TG_dictorsetmaker1_D0_1,		// dictorsetmaker1.0: '**' expr  
  TG_dictorsetmaker1_D1_0,		// dictorsetmaker1.1: comp_for  
  TG_dictorsetmaker1_D1_D0_0,		// dictorsetmaker1.1.0: ε  
  TG_dictorsetmaker1_D1_D0_D0_0,		// dictorsetmaker1.1.0.0: test  ':' test  
  TG_dictorsetmaker1_D1_D0_D0_1,		// dictorsetmaker1.1.0.0: '**' expr  
  TG_dictorsetmaker1_D1_D0_1,		// dictorsetmaker1.1.0: ',' dictorsetmaker1.1.0.0  
  TG_dictorsetmaker1_D1_D0_2,		// dictorsetmaker1.1.0: dictorsetmaker1.1.0  ',' dictorsetmaker1.1.0.0  
  TG_dictorsetmaker1_D1_D1_0,		// dictorsetmaker1.1.1: ε  
  TG_dictorsetmaker1_D1_D1_1,		// dictorsetmaker1.1.1: ',' 
  TG_dictorsetmaker1_D1_1,		// dictorsetmaker1.1: dictorsetmaker1.1.0  dictorsetmaker1.1.1  
  TG_dictorsetmaker1,		// dictorsetmaker1: dictorsetmaker1.0  dictorsetmaker1.1  
  TG_dictorsetmaker2_D0_0,		// dictorsetmaker2.0: test  
  TG_dictorsetmaker2_D0_1,		// dictorsetmaker2.0: star_expr  
  TG_dictorsetmaker2_D1_0,		// dictorsetmaker2.1: comp_for  
  TG_dictorsetmaker2_D1_D0_0,		// dictorsetmaker2.1.0: ε  
  TG_dictorsetmaker2_D1_D0_D0_0,		// dictorsetmaker2.1.0.0: test  
  TG_dictorsetmaker2_D1_D0_D0_1,		// dictorsetmaker2.1.0.0: star_expr  
  TG_dictorsetmaker2_D1_D0_1,		// dictorsetmaker2.1.0: ',' dictorsetmaker2.1.0.0  
  TG_dictorsetmaker2_D1_D0_2,		// dictorsetmaker2.1.0: dictorsetmaker2.1.0  ',' dictorsetmaker2.1.0.0  
  TG_dictorsetmaker2_D1_D1_0,		// dictorsetmaker2.1.1: ε  
  TG_dictorsetmaker2_D1_D1_1,		// dictorsetmaker2.1.1: ',' 
  TG_dictorsetmaker2_D1_1,		// dictorsetmaker2.1: dictorsetmaker2.1.0  dictorsetmaker2.1.1  
  TG_dictorsetmaker2,		// dictorsetmaker2: dictorsetmaker2.0  dictorsetmaker2.1  
  TG_dictorsetmaker_0,		// dictorsetmaker: dictorsetmaker1  
  TG_dictorsetmaker_1,		// dictorsetmaker: dictorsetmaker2  
  TG_power_D0_0,		// power.0: ε  
  TG_power_D0_1,		// power.0: '**' factor  
  TG_power,		// power: atom_expr  power.0  
  TG_factor_D0_0,		// factor.0: '+' 
  TG_factor_D0_1,		// factor.0: '-' 
  TG_factor_D0_2,		// factor.0: '~' 
  TG_factor_0,		// factor: factor.0  factor  
  TG_factor_1,		// factor: power  
  TG_term_D0_0,		// term.0: ε  
  TG_term_D0_D0_0,		// term.0.0: '*' 
  TG_term_D0_D0_1,		// term.0.0: '@' 
  TG_term_D0_D0_2,		// term.0.0: '/' 
  TG_term_D0_D0_3,		// term.0.0: '%' 
  TG_term_D0_D0_4,		// term.0.0: '//' 
  TG_term_D0_1,		// term.0: term.0.0  factor  
  TG_term_D0_2,		// term.0: term.0  term.0.0  factor  
  TG_term,		// term: factor  term.0  
  TG_arith_expr_D0_0,		// arith_expr.0: ε  
  TG_arith_expr_D0_D0_0,		// arith_expr.0.0: '+' 
  TG_arith_expr_D0_D0_1,		// arith_expr.0.0: '-' 
  TG_arith_expr_D0_1,		// arith_expr.0: arith_expr.0.0  term  
  TG_arith_expr_D0_2,		// arith_expr.0: arith_expr.0  arith_expr.0.0  term  
  TG_arith_expr,		// arith_expr: term  arith_expr.0  
  TG_shift_expr_D0_0,		// shift_expr.0: ε  
  TG_shift_expr_D0_D0_0,		// shift_expr.0.0: '<<' 
  TG_shift_expr_D0_D0_1,		// shift_expr.0.0: '>>' 
  TG_shift_expr_D0_1,		// shift_expr.0: shift_expr.0.0  arith_expr  
  TG_shift_expr_D0_2,		// shift_expr.0: shift_expr.0  shift_expr.0.0  arith_expr  
  TG_shift_expr,		// shift_expr: arith_expr  shift_expr.0  
  TG_and_expr_D0_0,		// and_expr.0: ε  
  TG_and_expr_D0_1,		// and_expr.0: '&' shift_expr  
  TG_and_expr_D0_2,		// and_expr.0: and_expr.0  '&' shift_expr  
  TG_and_expr,		// and_expr: shift_expr  and_expr.0  
  TG_xor_expr_D0_0,		// xor_expr.0: ε  
  TG_xor_expr_D0_1,		// xor_expr.0: '^' and_expr  
  TG_xor_expr_D0_2,		// xor_expr.0: xor_expr.0  '^' and_expr  
  TG_xor_expr,		// xor_expr: and_expr  xor_expr.0  
  TG_expr_D0_0,		// expr.0: ε  
  TG_expr_D0_1,		// expr.0: '|' xor_expr  
  TG_expr_D0_2,		// expr.0: expr.0  '|' xor_expr  
  TG_expr,		// expr: xor_expr  expr.0  
  TG_comparison_D0_0,		// comparison.0: ε  
  TG_comparison_D0_1,		// comparison.0: comp_op  expr  
  TG_comparison_D0_2,		// comparison.0: comparison.0  comp_op  expr  
  TG_comparison,		// comparison: expr  comparison.0  
  TG_comp_op_0,		// comp_op: '<' 
  TG_comp_op_1,		// comp_op: '>' 
  TG_comp_op_2,		// comp_op: '==' 
  TG_comp_op_3,		// comp_op: '>=' 
  TG_comp_op_4,		// comp_op: '<=' 
  TG_comp_op_5,		// comp_op: '<>' 
  TG_comp_op_6,		// comp_op: '!=' 
  TG_comp_op_7,		// comp_op: 'in' 
  TG_comp_op_8,		// comp_op: 'not' 'in' 
  TG_not_test_0,		// not_test: 'not' not_test  
  TG_not_test_1,		// not_test: comparison  
  TG_and_test_D0_0,		// and_test.0: ε  
  TG_and_test_D0_1,		// and_test.0: 'and' not_test  
  TG_and_test_D0_2,		// and_test.0: and_test.0  'and' not_test  
  TG_and_test,		// and_test: not_test  and_test.0  
  TG_or_test_D0_0,		// or_test.0: ε  
  TG_or_test_D0_1,		// or_test.0: 'or' and_test  
  TG_or_test_D0_2,		// or_test.0: or_test.0  'or' and_test  
  TG_or_test,		// or_test: and_test  or_test.0  
  TG_lambdef_D0_0,		// lambdef.0: ε  
  TG_lambdef_D0_1,		// lambdef.0: argslist  
  TG_lambdef,		// lambdef: 'lambda' lambdef.0  ':' test  
  TG_test_nocond_0,		// test_nocond: or_test  
  TG_test_nocond_1,		// test_nocond: lambdef_nocond  
  TG_lambdef_nocond_D0_0,		// lambdef_nocond.0: ε  
  TG_lambdef_nocond_D0_1,		// lambdef_nocond.0: argslist  
  TG_lambdef_nocond,		// lambdef_nocond: 'lambda' lambdef_nocond.0  ':' test_nocond  
  TG_test_D0_0,		// test.0: ε  
  TG_test_D0_1,		// test.0: '?' or_test  ':' test  
  TG_test_0,		// test: or_test  test.0  
  TG_test_1,		// test: lambdef  
  TG_dotname_D0_0,		// dotname.0: ε  
  TG_dotname_D0_1,		// dotname.0: '.' NAME  
  TG_dotname_D0_2,		// dotname.0: dotname.0  '.' NAME  
  TG_dotname,		// dotname: NAME  dotname.0  
  TG_decorator_D0_0,		// decorator.0: ε  
  TG_decorator_D0_1,		// decorator.0: arglist  
  TG_decorator,		// decorator: '@' dotname  decorator.0  NLINE  
  TG_decorators_0,		// decorators: ε  
  TG_decorators_1,		// decorators: decorator  
  TG_decorators_2,		// decorators: decorators  decorator  
  TG_yield_expr_D0_0,		// yield_expr.0: ε  
  TG_yield_expr_D0_1,		// yield_expr.0: yield_arg  
  TG_yield_expr,		// yield_expr: 'yield' yield_expr.0  
  TG_yield_arg,		// yield_arg: 'from' testlist  
  TG_async_funcdef,		// async_funcdef: 'async' funcdef  
  TG_parameters_D0_0,		// parameters.0: ε  
  TG_parameters_D0_1,		// parameters.0: argslist  
  TG_parameters,		// parameters: '(' parameters.0  ')' 
  TG_arg_D0_0,		// arg.0: ε  
  TG_arg_D0_1,		// arg.0: ':' test  
  TG_arg,		// arg: NAME  arg.0  
  TG_argassign,		// argassign: arg  '=' test  
  TG_argbase_D0_0,		// argbase.0: ε  
  TG_argbase_D0_1,		// argbase.0: ',' arg  
  TG_argbase_D0_2,		// argbase.0: argbase.0  ',' arg  
  TG_argbase_D1_0,		// argbase.1: ε  
  TG_argbase_D1_D0_0,		// argbase.1.0: argnotbase  
  TG_argbase_D1_D0_1,		// argbase.1.0: argone  
  TG_argbase_D1_D0_2,		// argbase.1.0: argtwo  
  TG_argbase_D1_1,		// argbase.1: ',' argbase.1.0  
  TG_argbase,		// argbase: arg  argbase.0  argbase.1  
  TG_argnotbase_D0_0,		// argnotbase.0: ε  
  TG_argnotbase_D0_1,		// argnotbase.0: ',' argassign  
  TG_argnotbase_D0_2,		// argnotbase.0: argnotbase.0  ',' argassign  
  TG_argnotbase_D1_0,		// argnotbase.1: ε  
  TG_argnotbase_D1_D0_0,		// argnotbase.1.0: argone  
  TG_argnotbase_D1_D0_1,		// argnotbase.1.0: argtwo  
  TG_argnotbase_D1_1,		// argnotbase.1: ',' argnotbase.1.0  
  TG_argnotbase,		// argnotbase: argassign  argnotbase.0  argnotbase.1  
  TG_argone_D0_0,		// argone.0: ε  
  TG_argone_D0_1,		// argone.0: arg  
  TG_argone_D1_0,		// argone.1: ε  
  TG_argone_D1_1,		// argone.1: ',' argtwo  
  TG_argone,		// argone: '*' argone.0  argone.1  
  TG_argtwo,		// argtwo: '**' arg  
  TG_argslist_0,		// argslist: argone  
  TG_argslist_1,		// argslist: argtwo  
  TG_argslist_2,		// argslist: argnotbase  
  TG_argslist_3,		// argslist: argbase  
  TG_block_stats,		// block_stats: '{' stats  '}' 
  TG_block_head,		// block_head: '{' 
  TG_block,		// block: block_head  stats  '}' 
  TG_stats_D0_0,		// stats.0: ε  
  TG_stats_D0_1,		// stats.0: NLINE  
  TG_stats_D1_0,		// stats.1: ε  
  TG_stats_D1_1,		// stats.1: NLINE  STAT  
  TG_stats_D1_2,		// stats.1: stats.1  NLINE  STAT  
  TG_stats_D2_0,		// stats.2: ε  
  TG_stats_D2_1,		// stats.2: NLINE  
  TG_stats_0,		// stats: stats.0  STAT  stats.1  stats.2  
  TG_stats_1,		// stats: ε  
  TG_stats_2,		// stats: NLINE  
  TG_class_stats_D0_0,		// class_stats.0: ε  
  TG_class_stats_D0_1,		// class_stats.0: NLINE  
  TG_class_stats_D1_0,		// class_stats.1: ε  
  TG_class_stats_D1_1,		// class_stats.1: NLINE  inclass_stmt  
  TG_class_stats_D1_2,		// class_stats.1: class_stats.1  NLINE  inclass_stmt  
  TG_class_stats_D2_0,		// class_stats.2: ε  
  TG_class_stats_D2_1,		// class_stats.2: NLINE  
  TG_class_stats_0,		// class_stats: class_stats.0  inclass_stmt  class_stats.1  class_stats.2  
  TG_class_stats_1,		// class_stats: ε  
  TG_class_stats_2,		// class_stats: NLINE  
  TG_loop_stats_D0_0,		// loop_stats.0: ε  
  TG_loop_stats_D0_1,		// loop_stats.0: NLINE  
  TG_loop_stats_D1_0,		// loop_stats.1: ε  
  TG_loop_stats_D1_1,		// loop_stats.1: NLINE  inloop_stmt  
  TG_loop_stats_D1_2,		// loop_stats.1: loop_stats.1  NLINE  inloop_stmt  
  TG_loop_stats_D2_0,		// loop_stats.2: ε  
  TG_loop_stats_D2_1,		// loop_stats.2: NLINE  
  TG_loop_stats_0,		// loop_stats: loop_stats.0  inloop_stmt  loop_stats.1  loop_stats.2  
  TG_loop_stats_1,		// loop_stats: ε  
  TG_loop_stats_2,		// loop_stats: NLINE  
  TG_STAT_0,		// STAT: simple_stmt  
  TG_STAT_1,		// STAT: compound_stmt  
  TG_simple_stmt_0,		// simple_stmt: assign_stmt  
  TG_simple_stmt_1,		// simple_stmt: del_stmt  
  TG_simple_stmt_2,		// simple_stmt: flow_stmt  
  TG_simple_stmt_3,		// simple_stmt: vardef  
  TG_simple_stmt_4,		// simple_stmt: import_stmt  
  TG_simple_stmt_5,		// simple_stmt: assert_stmt  
  TG_simple_stmt_6,		// simple_stmt: call_stmt  
  TG_call_stmt,		// call_stmt: var_expr  
  TG_varlist_D0_0,		// varlist.0: var_expr  
  TG_varlist_D0_1,		// varlist.0: star_expr  
  TG_varlist_D1_0,		// varlist.1: ε  
  TG_varlist_D1_D0_0,		// varlist.1.0: var_expr  
  TG_varlist_D1_D0_1,		// varlist.1.0: star_expr  
  TG_varlist_D1_1,		// varlist.1: ',' varlist.1.0  
  TG_varlist_D1_2,		// varlist.1: varlist.1  ',' varlist.1.0  
  TG_varlist,		// varlist: varlist.0  varlist.1  
  TG_assign_stmt_D0_D0_0,		// assign_stmt.0.0: yield_expr  
  TG_assign_stmt_D0_D0_1,		// assign_stmt.0.0: testlist  
  TG_assign_stmt_D0_0,		// assign_stmt.0: augassign  assign_stmt.0.0  
  TG_assign_stmt_D0_D1_0,		// assign_stmt.0.1: ε  
  TG_assign_stmt_D0_D1_1,		// assign_stmt.0.1: assign  
  TG_assign_stmt_D0_D1_2,		// assign_stmt.0.1: assign_stmt.0.1  assign  
  TG_assign_stmt_D0_1,		// assign_stmt.0: assign  assign_stmt.0.1  
  TG_assign_stmt,		// assign_stmt: varlist  assign_stmt.0  
  TG_assign_D0_0,		// assign.0: yield_expr  
  TG_assign_D0_1,		// assign.0: test_star_list  
  TG_assign,		// assign: '=' assign.0  
  TG_augassign_0,		// augassign: '+=' 
  TG_augassign_1,		// augassign: '-=' 
  TG_augassign_2,		// augassign: '*=' 
  TG_augassign_3,		// augassign: '@=' 
  TG_augassign_4,		// augassign: '/=' 
  TG_augassign_5,		// augassign: '%=' 
  TG_augassign_6,		// augassign: '&=' 
  TG_augassign_7,		// augassign: '|=' 
  TG_augassign_8,		// augassign: '^=' 
  TG_augassign_9,		// augassign: '<<=' 
  TG_augassign_10,		// augassign: '>>=' 
  TG_augassign_11,		// augassign: '**=' 
  TG_augassign_12,		// augassign: '//=' 
  TG_test_star_list_D0_0,		// test_star_list.0: test  
  TG_test_star_list_D0_1,		// test_star_list.0: star_expr  
  TG_test_star_list_D1_0,		// test_star_list.1: ε  
  TG_test_star_list_D1_D0_0,		// test_star_list.1.0: test  
  TG_test_star_list_D1_D0_1,		// test_star_list.1.0: star_expr  
  TG_test_star_list_D1_1,		// test_star_list.1: ',' test_star_list.1.0  
  TG_test_star_list_D1_2,		// test_star_list.1: test_star_list.1  ',' test_star_list.1.0  
  TG_test_star_list_D2_0,		// test_star_list.2: ε  
  TG_test_star_list_D2_1,		// test_star_list.2: ',' 
  TG_test_star_list,		// test_star_list: test_star_list.0  test_star_list.1  test_star_list.2  
  TG_star_expr,		// star_expr: '*' expr  
  TG_del_stmt,		// del_stmt: 'del' exprlist  
  TG_exprlist_D0_0,		// exprlist.0: expr  
  TG_exprlist_D0_1,		// exprlist.0: star_expr  
  TG_exprlist_D1_0,		// exprlist.1: ε  
  TG_exprlist_D1_D0_0,		// exprlist.1.0: expr  
  TG_exprlist_D1_D0_1,		// exprlist.1.0: star_expr  
  TG_exprlist_D1_1,		// exprlist.1: ',' exprlist.1.0  
  TG_exprlist_D1_2,		// exprlist.1: exprlist.1  ',' exprlist.1.0  
  TG_exprlist_D2_0,		// exprlist.2: ε  
  TG_exprlist_D2_1,		// exprlist.2: ',' 
  TG_exprlist,		// exprlist: exprlist.0  exprlist.1  exprlist.2  
  TG_inloop_stmt_0,		// inloop_stmt: break_stmt  
  TG_inloop_stmt_1,		// inloop_stmt: continue_stmt  
  TG_inloop_stmt_2,		// inloop_stmt: STAT  
  TG_inclass_stmt_0,		// inclass_stmt: methdef  
  TG_inclass_stmt_1,		// inclass_stmt: STAT  
  TG_flow_stmt_0,		// flow_stmt: return_stmt  
  TG_flow_stmt_1,		// flow_stmt: raise_stmt  
  TG_flow_stmt_2,		// flow_stmt: yield_stmt  
  TG_break_stmt,		// break_stmt: 'break' 
  TG_continue_stmt,		// continue_stmt: 'continue' 
  TG_return_stmt_D0_0,		// return_stmt.0: ε  
  TG_return_stmt_D0_1,		// return_stmt.0: testlist  
  TG_return_stmt,		// return_stmt: 'return' return_stmt.0  
  TG_raise_stmt_D0_0,		// raise_stmt.0: ε  
  TG_raise_stmt_D0_D0_0,		// raise_stmt.0.0: ε  
  TG_raise_stmt_D0_D0_1,		// raise_stmt.0.0: 'from' test  
  TG_raise_stmt_D0_1,		// raise_stmt.0: test  raise_stmt.0.0  
  TG_raise_stmt,		// raise_stmt: 'raise' raise_stmt.0  
  TG_yield_stmt,		// yield_stmt: yield_expr  
  TG_import_stmt_D0_0,		// import_stmt.0: ε  
  TG_import_stmt_D0_1,		// import_stmt.0: ':' namelist  
  TG_import_stmt_D1_0,		// import_stmt.1: ε  
  TG_import_stmt_D1_1,		// import_stmt.1: 'as' namelist  
  TG_import_stmt,		// import_stmt: 'import' dotname  import_stmt.0  import_stmt.1  
  TG_annname_D0_0,		// annname.0: ε  
  TG_annname_D0_1,		// annname.0: ':' test  
  TG_annname,		// annname: NAME  annname.0  
  TG_varname_D0_0,		// varname.0: ε  
  TG_varname_D0_1,		// varname.0: ',' annname  
  TG_varname_D0_2,		// varname.0: varname.0  ',' annname  
  TG_varname,		// varname: annname  varname.0  
  TG_vardef_D0_0,		// vardef.0: 'var' 
  TG_vardef_D0_1,		// vardef.0: 'global' 
  TG_vardef_D0_2,		// vardef.0: 'extern' 
  TG_vardef_D1_0,		// vardef.1: ε  
  TG_vardef_D1_1,		// vardef.1: assign  
  TG_vardef,		// vardef: vardef.0  varname  vardef.1  
  TG_nonlocal_stmt,		// nonlocal_stmt: 'extern' namelist  
  TG_assert_stmt_D0_0,		// assert_stmt.0: ε  
  TG_assert_stmt_D0_1,		// assert_stmt.0: ',' test  
  TG_assert_stmt,		// assert_stmt: 'assert' test  assert_stmt.0  
  TG_compound_stmt_0,		// compound_stmt: if_stmt  
  TG_compound_stmt_1,		// compound_stmt: while_stmt  
  TG_compound_stmt_2,		// compound_stmt: for_stmt  
  TG_compound_stmt_3,		// compound_stmt: try_stmt  
  TG_compound_stmt_4,		// compound_stmt: block  
  TG_compound_stmt_5,		// compound_stmt: with_stmt  
  TG_compound_stmt_6,		// compound_stmt: funcdef  
  TG_compound_stmt_7,		// compound_stmt: classdef  
  TG_compound_stmt_8,		// compound_stmt: decorated  
  TG_compound_stmt_9,		// compound_stmt: async_stmt  
  TG_condition,		// condition: test  
  TG_if_block,		// if_block: condition  block  
  TG_else_prefix,		// else_prefix: 'else' 
  TG_if_else_block,		// if_else_block: else_prefix  block  
  TG_if_stmt_D0_0,		// if_stmt.0: ε  
  TG_if_stmt_D0_1,		// if_stmt.0: 'elif' if_block  
  TG_if_stmt_D0_2,		// if_stmt.0: if_stmt.0  'elif' if_block  
  TG_if_stmt_D1_0,		// if_stmt.1: ε  
  TG_if_stmt_D1_1,		// if_stmt.1: if_else_block  
  TG_if_stmt,		// if_stmt: 'if' if_block  if_stmt.0  if_stmt.1  
  TG_while_cond,		// while_cond: test  
  TG_loop_block,		// loop_block: '{' loop_stats  '}' 
  TG_while_block,		// while_block: while_cond  loop_block  
  TG_while_else_block,		// while_else_block: else_prefix  block  
  TG_while_stmt_D0_0,		// while_stmt.0: ε  
  TG_while_stmt_D0_1,		// while_stmt.0: while_else_block  
  TG_while_stmt,		// while_stmt: 'while' while_block  while_stmt.0  
  TG_for_stmt_D0_0,		// for_stmt.0: ε  
  TG_for_stmt_D0_1,		// for_stmt.0: 'else' block  
  TG_for_stmt,		// for_stmt: 'for' exprlist  'in' testlist  block  for_stmt.0  
  TG_testlist_D0_0,		// testlist.0: ε  
  TG_testlist_D0_1,		// testlist.0: ',' test  
  TG_testlist_D0_2,		// testlist.0: testlist.0  ',' test  
  TG_testlist_D1_0,		// testlist.1: ε  
  TG_testlist_D1_1,		// testlist.1: ',' 
  TG_testlist,		// testlist: test  testlist.0  testlist.1  
  TG_try_head,		// try_head: 'try' 
  TG_try_else,		// try_else: 'else' 
  TG_catch_block,		// catch_block: except_clause  block  
  TG_except_clause_D0_0,		// except_clause.0: ε  
  TG_except_clause_D0_D0_0,		// except_clause.0.0: ε  
  TG_except_clause_D0_D0_1,		// except_clause.0.0: 'as' NAME  
  TG_except_clause_D0_1,		// except_clause.0: test  except_clause.0.0  
  TG_except_clause,		// except_clause: 'except' except_clause.0  
  TG_try_stmt_D0_D0_0,		// try_stmt.0.0: ε  
  TG_try_stmt_D0_D0_1,		// try_stmt.0.0: catch_block  
  TG_try_stmt_D0_D0_2,		// try_stmt.0.0: try_stmt.0.0  catch_block  
  TG_try_stmt_D0_D1_0,		// try_stmt.0.1: ε  
  TG_try_stmt_D0_D1_1,		// try_stmt.0.1: try_else  block  
  TG_try_stmt_D0_D2_0,		// try_stmt.0.2: ε  
  TG_try_stmt_D0_D2_1,		// try_stmt.0.2: 'finally' block  
  TG_try_stmt_D0_0,		// try_stmt.0: catch_block  try_stmt.0.0  try_stmt.0.1  try_stmt.0.2  
  TG_try_stmt_D0_1,		// try_stmt.0: 'finally' block  
  TG_try_stmt,		// try_stmt: try_head  block  try_stmt.0  
  TG_with_stmt_D0_0,		// with_stmt.0: ε  
  TG_with_stmt_D0_1,		// with_stmt.0: ',' with_item  
  TG_with_stmt_D0_2,		// with_stmt.0: with_stmt.0  ',' with_item  
  TG_with_stmt,		// with_stmt: 'with' with_item  with_stmt.0  block  
  TG_with_item_D0_0,		// with_item.0: ε  
  TG_with_item_D0_1,		// with_item.0: 'as' expr  
  TG_with_item,		// with_item: test  with_item.0  
  TG_func_head,		// func_head: NAME  parameters  
  TG_funcdef,		// funcdef: 'func' func_head  block_stats  
  TG_meth_head_D0_0,		// meth_head.0: ε  
  TG_meth_head_D0_1,		// meth_head.0: 'static' 
  TG_meth_head,		// meth_head: meth_head.0  NAME  parameters  
  TG_methdef,		// methdef: 'def' meth_head  block_stats  
  TG_class_head_D0_0,		// class_head.0: ε  
  TG_class_head_D0_1,		// class_head.0: arglist  
  TG_class_head,		// class_head: NAME  class_head.0  
  TG_classdef,		// classdef: 'class' class_head  '{' class_stats  '}' 
  TG_arglist_D0_0,		// arglist.0: ε  
  TG_arglist_D0_D0_0,		// arglist.0.0: ε  
  TG_arglist_D0_D0_1,		// arglist.0.0: ',' argument  
  TG_arglist_D0_D0_2,		// arglist.0.0: arglist.0.0  ',' argument  
  TG_arglist_D0_1,		// arglist.0: argument  arglist.0.0  
  TG_arglist,		// arglist: '(' arglist.0  ')' 
  TG_argument_D0_0,		// argument.0: ε  
  TG_argument_D0_1,		// argument.0: comp_for  
  TG_argument_0,		// argument: test  argument.0  
  TG_argument_1,		// argument: NAME  '=' test  
  TG_argument_2,		// argument: '**' test  
  TG_argument_3,		// argument: '*' test  
  TG_comp_iter_0,		// comp_iter: comp_for  
  TG_comp_iter_1,		// comp_iter: comp_if  
  TG_sync_comp_for_D0_0,		// sync_comp_for.0: ε  
  TG_sync_comp_for_D0_1,		// sync_comp_for.0: comp_iter  
  TG_sync_comp_for,		// sync_comp_for: 'for' exprlist  'in' or_test  sync_comp_for.0  
  TG_comp_for_D0_0,		// comp_for.0: ε  
  TG_comp_for_D0_1,		// comp_for.0: 'async' 
  TG_comp_for,		// comp_for: comp_for.0  sync_comp_for  
  TG_comp_if_D0_0,		// comp_if.0: ε  
  TG_comp_if_D0_1,		// comp_if.0: comp_iter  
  TG_comp_if,		// comp_if: 'if' test_nocond  comp_if.0  
  TG_decorated_D0_0,		// decorated.0: classdef  
  TG_decorated_D0_1,		// decorated.0: funcdef  
  TG_decorated_D0_2,		// decorated.0: async_funcdef  
  TG_decorated,		// decorated: decorators  decorated.0  
  TG_async_stmt_D0_0,		// async_stmt.0: funcdef  
  TG_async_stmt_D0_1,		// async_stmt.0: with_stmt  
  TG_async_stmt_D0_2,		// async_stmt.0: for_stmt  
  TG_async_stmt,		// async_stmt: 'async' async_stmt.0  
} TypeGram;

#endif /* INCLUDE_TYPEGRAM_H_ */

/*
 * START: stats  
 * STAT: simple_stmt  
 * STAT: compound_stmt  
 * stats: NLINE  
 * stats: ε  
 * stats: stats.0  STAT  stats.1  stats.2  
 * atom1: NUM  
 * atom1: BOOL  
 * atom1: STRING  
 * atom1: NULL  
 * atom2: NAME  
 * atom2: '(' atom2.0  ')' 
 * yield_expr: 'yield' yield_expr.0  
 * testlist_comp: testlist_comp.0  testlist_comp.1  testlist_comp.2  
 * atom3: '{' atom3.0  '}' 
 * atom3: '[' atom3.1  ']' 
 * atom2.0: yield_expr  
 * atom2.0: testlist_comp  
 * atom2.0: ε  
 * dictorsetmaker: dictorsetmaker1  
 * dictorsetmaker: dictorsetmaker2  
 * atom3.0: dictorsetmaker  
 * atom3.0: ε  
 * atom3.1: testlist_comp  
 * atom3.1: ε  
 * test: lambdef  
 * test: or_test  test.0  
 * star_expr: '*' expr  
 * comp_for: comp_for.0  sync_comp_for  
 * testlist_comp.0: test  
 * testlist_comp.0: star_expr  
 * testlist_comp.1: comp_for  
 * testlist_comp.1: ε  
 * testlist_comp.1: ',' testlist_comp.1.0  
 * testlist_comp.1: testlist_comp.1  ',' testlist_comp.1.0  
 * testlist_comp.1.0: test  
 * testlist_comp.1.0: star_expr  
 * testlist_comp.2: ε  
 * testlist_comp.2: ',' 
 * atom_expr: atom1  
 * atom_expr: atom_expr.0  atom_expr.1  
 * trailer: arglist  
 * trailer: '.' NAME  
 * trailer: '[' subscriptlist  ']' 
 * var_expr: atom2  var_expr.0  
 * atom_expr.0: atom2  
 * atom_expr.0: atom3  
 * atom_expr.1: trailer  
 * atom_expr.1: ε  
 * atom_expr.1: atom_expr.1  trailer  
 * var_expr.0: trailer  
 * var_expr.0: ε  
 * var_expr.0: var_expr.0  trailer  
 * arglist: '(' arglist.0  ')' 
 * subscriptlist: subscript  subscriptlist.0  subscriptlist.1  
 * subscript: test  
 * subscript: subscript.0  ':' subscript.1  subscript.2  
 * subscriptlist.0: ε  
 * subscriptlist.0: ',' subscript  
 * subscriptlist.0: subscriptlist.0  ',' subscript  
 * subscriptlist.1: ε  
 * subscriptlist.1: ',' 
 * sliceop: ':' sliceop.0  
 * subscript.0: test  
 * subscript.0: ε  
 * subscript.1: test  
 * subscript.1: ε  
 * subscript.2: sliceop  
 * subscript.2: ε  
 * dictorsetmaker1: dictorsetmaker1.0  dictorsetmaker1.1  
 * sliceop.0: test  
 * sliceop.0: ε  
 * expr: xor_expr  expr.0  
 * dictorsetmaker1.0: '**' expr  
 * dictorsetmaker1.0: test  ':' test  
 * dictorsetmaker1.1: comp_for  
 * dictorsetmaker1.1: dictorsetmaker1.1.0  dictorsetmaker1.1.1  
 * dictorsetmaker2: dictorsetmaker2.0  dictorsetmaker2.1  
 * dictorsetmaker1.1.0: ε  
 * dictorsetmaker1.1.0: ',' dictorsetmaker1.1.0.0  
 * dictorsetmaker1.1.0: dictorsetmaker1.1.0  ',' dictorsetmaker1.1.0.0  
 * dictorsetmaker1.1.0.0: '**' expr  
 * dictorsetmaker1.1.0.0: test  ':' test  
 * dictorsetmaker1.1.1: ε  
 * dictorsetmaker1.1.1: ',' 
 * dictorsetmaker2.0: test  
 * dictorsetmaker2.0: star_expr  
 * dictorsetmaker2.1: comp_for  
 * dictorsetmaker2.1: dictorsetmaker2.1.0  dictorsetmaker2.1.1  
 * dictorsetmaker2.1.0: ε  
 * dictorsetmaker2.1.0: ',' dictorsetmaker2.1.0.0  
 * dictorsetmaker2.1.0: dictorsetmaker2.1.0  ',' dictorsetmaker2.1.0.0  
 * dictorsetmaker2.1.0.0: test  
 * dictorsetmaker2.1.0.0: star_expr  
 * dictorsetmaker2.1.1: ε  
 * dictorsetmaker2.1.1: ',' 
 * power: atom_expr  power.0  
 * factor: power  
 * factor: factor.0  factor  
 * power.0: ε  
 * power.0: '**' factor  
 * term: factor  term.0  
 * factor.0: '+' 
 * factor.0: '-' 
 * factor.0: '~' 
 * arith_expr: term  arith_expr.0  
 * term.0: ε  
 * term.0: term.0.0  factor  
 * term.0: term.0  term.0.0  factor  
 * term.0.0: '*' 
 * term.0.0: '@' 
 * term.0.0: '/' 
 * term.0.0: '%' 
 * term.0.0: '//' 
 * shift_expr: arith_expr  shift_expr.0  
 * arith_expr.0: ε  
 * arith_expr.0: arith_expr.0.0  term  
 * arith_expr.0: arith_expr.0  arith_expr.0.0  term  
 * arith_expr.0.0: '+' 
 * arith_expr.0.0: '-' 
 * and_expr: shift_expr  and_expr.0  
 * shift_expr.0: ε  
 * shift_expr.0: shift_expr.0.0  arith_expr  
 * shift_expr.0: shift_expr.0  shift_expr.0.0  arith_expr  
 * shift_expr.0.0: '<<' 
 * shift_expr.0.0: '>>' 
 * xor_expr: and_expr  xor_expr.0  
 * and_expr.0: ε  
 * and_expr.0: '&' shift_expr  
 * and_expr.0: and_expr.0  '&' shift_expr  
 * xor_expr.0: ε  
 * xor_expr.0: '^' and_expr  
 * xor_expr.0: xor_expr.0  '^' and_expr  
 * comparison: expr  comparison.0  
 * expr.0: ε  
 * expr.0: '|' xor_expr  
 * expr.0: expr.0  '|' xor_expr  
 * comp_op: '<' 
 * comp_op: '>' 
 * comp_op: '==' 
 * comp_op: '>=' 
 * comp_op: '<=' 
 * comp_op: '<>' 
 * comp_op: '!=' 
 * comp_op: 'in' 
 * comp_op: 'not' 'in' 
 * comparison.0: ε  
 * comparison.0: comp_op  expr  
 * comparison.0: comparison.0  comp_op  expr  
 * not_test: comparison  
 * not_test: 'not' not_test  
 * and_test: not_test  and_test.0  
 * or_test: and_test  or_test.0  
 * and_test.0: ε  
 * and_test.0: 'and' not_test  
 * and_test.0: and_test.0  'and' not_test  
 * lambdef: 'lambda' lambdef.0  ':' test  
 * or_test.0: ε  
 * or_test.0: 'or' and_test  
 * or_test.0: or_test.0  'or' and_test  
 * argslist: argbase  
 * argslist: argnotbase  
 * argslist: argone  
 * argslist: argtwo  
 * lambdef.0: argslist  
 * lambdef.0: ε  
 * test_nocond: or_test  
 * test_nocond: lambdef_nocond  
 * lambdef_nocond: 'lambda' lambdef_nocond.0  ':' test_nocond  
 * lambdef_nocond.0: argslist  
 * lambdef_nocond.0: ε  
 * dotname: NAME  dotname.0  
 * test.0: ε  
 * test.0: '?' or_test  ':' test  
 * decorator: '@' dotname  decorator.0  NLINE  
 * dotname.0: ε  
 * dotname.0: '.' NAME  
 * dotname.0: dotname.0  '.' NAME  
 * decorator.0: arglist  
 * decorator.0: ε  
 * decorators: decorator  
 * decorators: ε  
 * decorators: decorators  decorator  
 * yield_arg: 'from' testlist  
 * yield_expr.0: yield_arg  
 * yield_expr.0: ε  
 * testlist: test  testlist.0  testlist.1  
 * async_funcdef: 'async' funcdef  
 * funcdef: 'func' func_head  block_stats  
 * parameters: '(' parameters.0  ')' 
 * parameters.0: argslist  
 * parameters.0: ε  
 * arg: NAME  arg.0  
 * argassign: arg  '=' test  
 * arg.0: ε  
 * arg.0: ':' test  
 * argbase: arg  argbase.0  argbase.1  
 * argbase.0: ε  
 * argbase.0: ',' arg  
 * argbase.0: argbase.0  ',' arg  
 * argbase.1: ε  
 * argbase.1: ',' argbase.1.0  
 * argnotbase: argassign  argnotbase.0  argnotbase.1  
 * argone: '*' argone.0  argone.1  
 * argtwo: '**' arg  
 * argbase.1.0: argnotbase  
 * argbase.1.0: argone  
 * argbase.1.0: argtwo  
 * argnotbase.0: ε  
 * argnotbase.0: ',' argassign  
 * argnotbase.0: argnotbase.0  ',' argassign  
 * argnotbase.1: ε  
 * argnotbase.1: ',' argnotbase.1.0  
 * argnotbase.1.0: argone  
 * argnotbase.1.0: argtwo  
 * argone.0: arg  
 * argone.0: ε  
 * argone.1: ε  
 * argone.1: ',' argtwo  
 * block_stats: '{' stats  '}' 
 * block_head: '{' 
 * block: block_head  stats  '}' 
 * class_stats: NLINE  
 * class_stats: ε  
 * class_stats: class_stats.0  inclass_stmt  class_stats.1  class_stats.2  
 * stats.0: NLINE  
 * stats.0: ε  
 * stats.1: ε  
 * stats.1: NLINE  STAT  
 * stats.1: stats.1  NLINE  STAT  
 * stats.2: NLINE  
 * stats.2: ε  
 * inclass_stmt: STAT  
 * inclass_stmt: methdef  
 * loop_stats: NLINE  
 * loop_stats: ε  
 * loop_stats: loop_stats.0  inloop_stmt  loop_stats.1  loop_stats.2  
 * class_stats.0: NLINE  
 * class_stats.0: ε  
 * class_stats.1: ε  
 * class_stats.1: NLINE  inclass_stmt  
 * class_stats.1: class_stats.1  NLINE  inclass_stmt  
 * class_stats.2: NLINE  
 * class_stats.2: ε  
 * inloop_stmt: STAT  
 * inloop_stmt: break_stmt  
 * inloop_stmt: continue_stmt  
 * loop_stats.0: NLINE  
 * loop_stats.0: ε  
 * loop_stats.1: ε  
 * loop_stats.1: NLINE  inloop_stmt  
 * loop_stats.1: loop_stats.1  NLINE  inloop_stmt  
 * loop_stats.2: NLINE  
 * loop_stats.2: ε  
 * simple_stmt: assign_stmt  
 * simple_stmt: del_stmt  
 * simple_stmt: flow_stmt  
 * simple_stmt: vardef  
 * simple_stmt: import_stmt  
 * simple_stmt: assert_stmt  
 * simple_stmt: call_stmt  
 * compound_stmt: funcdef  
 * compound_stmt: block  
 * compound_stmt: if_stmt  
 * compound_stmt: while_stmt  
 * compound_stmt: for_stmt  
 * compound_stmt: try_stmt  
 * compound_stmt: with_stmt  
 * compound_stmt: classdef  
 * compound_stmt: decorated  
 * compound_stmt: async_stmt  
 * assign_stmt: varlist  assign_stmt.0  
 * del_stmt: 'del' exprlist  
 * flow_stmt: return_stmt  
 * flow_stmt: raise_stmt  
 * flow_stmt: yield_stmt  
 * vardef: vardef.0  varname  vardef.1  
 * import_stmt: 'import' dotname  import_stmt.0  import_stmt.1  
 * assert_stmt: 'assert' test  assert_stmt.0  
 * call_stmt: var_expr  
 * varlist: varlist.0  varlist.1  
 * varlist.0: star_expr  
 * varlist.0: var_expr  
 * varlist.1: ε  
 * varlist.1: ',' varlist.1.0  
 * varlist.1: varlist.1  ',' varlist.1.0  
 * varlist.1.0: star_expr  
 * varlist.1.0: var_expr  
 * augassign: '+=' 
 * augassign: '-=' 
 * augassign: '*=' 
 * augassign: '@=' 
 * augassign: '/=' 
 * augassign: '%=' 
 * augassign: '&=' 
 * augassign: '|=' 
 * augassign: '^=' 
 * augassign: '<<=' 
 * augassign: '>>=' 
 * augassign: '**=' 
 * augassign: '//=' 
 * assign_stmt.0: augassign  assign_stmt.0.0  
 * assign_stmt.0: assign  assign_stmt.0.1  
 * assign_stmt.0.0: yield_expr  
 * assign_stmt.0.0: testlist  
 * assign: '=' assign.0  
 * assign_stmt.0.1: assign  
 * assign_stmt.0.1: ε  
 * assign_stmt.0.1: assign_stmt.0.1  assign  
 * assign.0: yield_expr  
 * assign.0: test_star_list  
 * test_star_list: test_star_list.0  test_star_list.1  test_star_list.2  
 * test_star_list.0: test  
 * test_star_list.0: star_expr  
 * test_star_list.1: ε  
 * test_star_list.1: ',' test_star_list.1.0  
 * test_star_list.1: test_star_list.1  ',' test_star_list.1.0  
 * test_star_list.1.0: test  
 * test_star_list.1.0: star_expr  
 * test_star_list.2: ε  
 * test_star_list.2: ',' 
 * exprlist: exprlist.0  exprlist.1  exprlist.2  
 * exprlist.0: star_expr  
 * exprlist.0: expr  
 * exprlist.1: ε  
 * exprlist.1: ',' exprlist.1.0  
 * exprlist.1: exprlist.1  ',' exprlist.1.0  
 * exprlist.1.0: star_expr  
 * exprlist.1.0: expr  
 * exprlist.2: ε  
 * exprlist.2: ',' 
 * break_stmt: 'break' 
 * continue_stmt: 'continue' 
 * methdef: 'def' meth_head  block_stats  
 * return_stmt: 'return' return_stmt.0  
 * raise_stmt: 'raise' raise_stmt.0  
 * yield_stmt: yield_expr  
 * return_stmt.0: testlist  
 * return_stmt.0: ε  
 * raise_stmt.0: ε  
 * raise_stmt.0: test  raise_stmt.0.0  
 * raise_stmt.0.0: ε  
 * raise_stmt.0.0: 'from' test  
 * import_stmt.0: ε  
 * import_stmt.0: ':' namelist  
 * import_stmt.1: ε  
 * import_stmt.1: 'as' namelist  
 * annname: NAME  annname.0  
 * varname: annname  varname.0  
 * annname.0: ε  
 * annname.0: ':' test  
 * varname.0: ε  
 * varname.0: ',' annname  
 * varname.0: varname.0  ',' annname  
 * vardef.0: 'var' 
 * vardef.0: 'global' 
 * vardef.0: 'extern' 
 * vardef.1: assign  
 * vardef.1: ε  
 * nonlocal_stmt: 'extern' namelist  
 * assert_stmt.0: ε  
 * assert_stmt.0: ',' test  
 * if_stmt: 'if' if_block  if_stmt.0  if_stmt.1  
 * while_stmt: 'while' while_block  while_stmt.0  
 * for_stmt: 'for' exprlist  'in' testlist  block  for_stmt.0  
 * try_stmt: try_head  block  try_stmt.0  
 * with_stmt: 'with' with_item  with_stmt.0  block  
 * classdef: 'class' class_head  '{' class_stats  '}' 
 * decorated: decorators  decorated.0  
 * async_stmt: 'async' async_stmt.0  
 * condition: test  
 * if_block: condition  block  
 * else_prefix: 'else' 
 * if_else_block: else_prefix  block  
 * if_stmt.0: ε  
 * if_stmt.0: 'elif' if_block  
 * if_stmt.0: if_stmt.0  'elif' if_block  
 * if_stmt.1: if_else_block  
 * if_stmt.1: ε  
 * while_cond: test  
 * loop_block: '{' loop_stats  '}' 
 * while_block: while_cond  loop_block  
 * while_else_block: else_prefix  block  
 * while_stmt.0: while_else_block  
 * while_stmt.0: ε  
 * for_stmt.0: ε  
 * for_stmt.0: 'else' block  
 * testlist.0: ε  
 * testlist.0: ',' test  
 * testlist.0: testlist.0  ',' test  
 * testlist.1: ε  
 * testlist.1: ',' 
 * try_head: 'try' 
 * try_else: 'else' 
 * catch_block: except_clause  block  
 * except_clause: 'except' except_clause.0  
 * except_clause.0: ε  
 * except_clause.0: test  except_clause.0.0  
 * except_clause.0.0: ε  
 * except_clause.0.0: 'as' NAME  
 * try_stmt.0: 'finally' block  
 * try_stmt.0: catch_block  try_stmt.0.0  try_stmt.0.1  try_stmt.0.2  
 * try_stmt.0.0: catch_block  
 * try_stmt.0.0: ε  
 * try_stmt.0.0: try_stmt.0.0  catch_block  
 * try_stmt.0.1: ε  
 * try_stmt.0.1: try_else  block  
 * try_stmt.0.2: ε  
 * try_stmt.0.2: 'finally' block  
 * with_item: test  with_item.0  
 * with_stmt.0: ε  
 * with_stmt.0: ',' with_item  
 * with_stmt.0: with_stmt.0  ',' with_item  
 * func_head: NAME  parameters  
 * with_item.0: ε  
 * with_item.0: 'as' expr  
 * meth_head: meth_head.0  NAME  parameters  
 * meth_head.0: ε  
 * meth_head.0: 'static' 
 * class_head: NAME  class_head.0  
 * class_head.0: arglist  
 * class_head.0: ε  
 * argument: test  argument.0  
 * argument: '**' test  
 * argument: '*' test  
 * argument: NAME  '=' test  
 * arglist.0: ε  
 * arglist.0: argument  arglist.0.0  
 * arglist.0.0: ε  
 * arglist.0.0: ',' argument  
 * arglist.0.0: arglist.0.0  ',' argument  
 * comp_iter: comp_for  
 * comp_iter: comp_if  
 * argument.0: comp_for  
 * argument.0: ε  
 * comp_if: 'if' test_nocond  comp_if.0  
 * sync_comp_for: 'for' exprlist  'in' or_test  sync_comp_for.0  
 * sync_comp_for.0: comp_iter  
 * sync_comp_for.0: ε  
 * comp_for.0: ε  
 * comp_for.0: 'async' 
 * comp_if.0: comp_iter  
 * comp_if.0: ε  
 * decorated.0: async_funcdef  
 * decorated.0: funcdef  
 * decorated.0: classdef  
 * async_stmt.0: funcdef  
 * async_stmt.0: for_stmt  
 * async_stmt.0: with_stmt  
 */