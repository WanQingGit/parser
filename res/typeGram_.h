/*
 *
 *  this is generated by code.
 *  If you want to modify, please modify the source code.
 *  
 *  Author: WanQing<1109162935@qq.com>
 */

#ifndef INCLUDE_TYPEGRAM_H_
#define INCLUDE_TYPEGRAM_H_

typedef enum {
  TG_START,		// START: statlist  
  TG_STAT_0,		// STAT: ifstat  
  TG_STAT_1,		// STAT: whilestat  
  TG_STAT_2,		// STAT: block  
  TG_STAT_3,		// STAT: localstat  
  TG_STAT_4,		// STAT: funcstat  
  TG_STAT_5,		// STAT: globalstat  
  TG_STAT_6,		// STAT: exprstat  
  TG_STAT_7,		// STAT: importstat  
  TG_statlist,		// statlist: statlist.0  STAT  statlist.1  statlist.2  
  TG_ifstat,		// ifstat: 'if' exp  block  ifstat.0  ifstat.1  
  TG_whilestat,		// whilestat: 'while' exp  block  
  TG_block,		// block: '{' block.0  '}' 
  TG_localstat,		// localstat: 'var' namelist  '=' explist  
  TG_funcstat,		// funcstat: 'func' funcname  funcbody  
  TG_globalstat,		// globalstat: 'global' namelist  '=' explist  
  TG_exprstat,		// exprstat: suffixedexp  exprstat.0  
  TG_importstat,		// importstat: 'import' dot_name  importstat.0  importstat.1  
  TG_explist,		// explist: exp  explist.0  
  TG_exp,		// exp: arith_expr8  
  TG_unop_0,		// unop: '-' 
  TG_unop_1,		// unop: 'not' 
  TG_unop_2,		// unop: '~' 
  TG_binop0,		// binop0: '**' 
  TG_binop1_0,		// binop1: '/' 
  TG_binop1_1,		// binop1: '//' 
  TG_binop1_2,		// binop1: '%' 
  TG_binop1_3,		// binop1: '*' 
  TG_binop2_0,		// binop2: '-' 
  TG_binop2_1,		// binop2: '+' 
  TG_binop3_0,		// binop3: '>>' 
  TG_binop3_1,		// binop3: '<<' 
  TG_binop4_0,		// binop4: '<' 
  TG_binop4_1,		// binop4: '<=' 
  TG_binop4_2,		// binop4: '>' 
  TG_binop4_3,		// binop4: '>=' 
  TG_binop4_4,		// binop4: '==' 
  TG_binop4_5,		// binop4: '!=' 
  TG_binop5_0,		// binop5: '^' 
  TG_binop5_1,		// binop5: '&' 
  TG_binop5_2,		// binop5: '|' 
  TG_binop6,		// binop6: 'and' 
  TG_binop7,		// binop7: 'or' 
  TG_binop8_0,		// binop8: '=' 
  TG_binop8_1,		// binop8: '+=' 
  TG_binop8_2,		// binop8: '-=' 
  TG_binop8_3,		// binop8: '*=' 
  TG_binop8_4,		// binop8: '/=' 
  TG_binop8_5,		// binop8: '%=' 
  TG_binop8_6,		// binop8: '&=' 
  TG_binop8_7,		// binop8: '|=' 
  TG_binop8_8,		// binop8: '^=' 
  TG_binop8_9,		// binop8: '<<=' 
  TG_binop8_10,		// binop8: '>>=' 
  TG_binop8_11,		// binop8: '**=' 
  TG_binop8_12,		// binop8: '//=' 
  TG_arith_expr0,		// arith_expr0: unop_exp  arith_expr0.0  
  TG_unop_exp,		// unop_exp: unop_exp.0  simpleexp  
  TG_arith_expr1,		// arith_expr1: arith_expr0  arith_expr1.0  
  TG_arith_expr2,		// arith_expr2: arith_expr1  arith_expr2.0  
  TG_arith_expr3,		// arith_expr3: arith_expr2  arith_expr3.0  
  TG_arith_expr4,		// arith_expr4: arith_expr3  arith_expr4.0  
  TG_arith_expr5,		// arith_expr5: arith_expr4  arith_expr5.0  
  TG_arith_expr6,		// arith_expr6: arith_expr5  arith_expr6.0  
  TG_arith_expr7,		// arith_expr7: arith_expr6  arith_expr7.0  
  TG_arith_expr8,		// arith_expr8: arith_expr7  arith_expr8.0  
  TG_simpleexp_0,		// simpleexp: suffixedexp  
  TG_simpleexp_1,		// simpleexp: functiondef  
  TG_simpleexp_2,		// simpleexp: listconstructor  
  TG_simpleexp_3,		// simpleexp: mapconstructor  
  TG_simpleexp_4,		// simpleexp: NUM  
  TG_simpleexp_5,		// simpleexp: BOOL  
  TG_simpleexp_6,		// simpleexp: STRING  
  TG_suffixedexp,		// suffixedexp: primaryexp  suffixedexp.0  
  TG_assignment,		// assignment: assignment.0  '=' explist  
  TG_dot_name,		// dot_name: NAME  dot_name.0  
  TG_namelist,		// namelist: NAME  namelist.0  
  TG_funcname,		// funcname: NAME  funcname.0  
  TG_funcbody,		// funcbody: '(' funcbody.0  ')' block  
  TG_functiondef,		// functiondef: 'func' funcbody  
  TG_listconstructor,		// listconstructor: '[' listconstructor.0  ']' 
  TG_mapconstructor,		// mapconstructor: '{' mapconstructor.0  '}' 
  TG_fieldlist,		// fieldlist: field  fieldlist.0  fieldlist.1  
  TG_field,		// field: NAME  ':' exp  
  TG_parlist,		// parlist: namelist  parlist.0  
  TG_primaryexp_0,		// primaryexp: NAME  
  TG_primaryexp_1,		// primaryexp: '(' exp  ')' 
  TG_fieldsel,		// fieldsel: '.' NAME  
  TG_yindex,		// yindex: '[' exp  ']' 
  TG_funcargs,		// funcargs: '(' funcargs.0  ')' 
} TypeGram;

#endif /* INCLUDE_TYPEGRAM_H_ */

/*
 * START: statlist  
 * STAT: ifstat  
 * STAT: whilestat  
 * STAT: block  
 * STAT: localstat  
 * STAT: funcstat  
 * STAT: globalstat  
 * STAT: exprstat  
 * STAT: importstat  
 * statlist: statlist.0  STAT  statlist.1  statlist.2  
 * ifstat: 'if' exp  block  ifstat.0  ifstat.1  
 * whilestat: 'while' exp  block  
 * block: '{' block.0  '}' 
 * localstat: 'var' namelist  '=' explist  
 * funcstat: 'func' funcname  funcbody  
 * globalstat: 'global' namelist  '=' explist  
 * exprstat: suffixedexp  exprstat.0  
 * importstat: 'import' dot_name  importstat.0  importstat.1  
 * explist: exp  explist.0  
 * exp: arith_expr8  
 * unop: '-' 
 * unop: 'not' 
 * unop: '~' 
 * explist.0: ε  
 * explist.0: ',' exp  
 * explist.0: explist.0  ',' exp  
 * binop0: '**' 
 * binop1: '/' 
 * binop1: '//' 
 * binop1: '%' 
 * binop1: '*' 
 * binop2: '-' 
 * binop2: '+' 
 * binop3: '>>' 
 * binop3: '<<' 
 * binop4: '<' 
 * binop4: '<=' 
 * binop4: '>' 
 * binop4: '>=' 
 * binop4: '==' 
 * binop4: '!=' 
 * binop5: '^' 
 * binop5: '&' 
 * binop5: '|' 
 * binop6: 'and' 
 * binop7: 'or' 
 * binop8: '=' 
 * binop8: '+=' 
 * binop8: '-=' 
 * binop8: '*=' 
 * binop8: '/=' 
 * binop8: '%=' 
 * binop8: '&=' 
 * binop8: '|=' 
 * binop8: '^=' 
 * binop8: '<<=' 
 * binop8: '>>=' 
 * binop8: '**=' 
 * binop8: '//=' 
 * arith_expr0: unop_exp  arith_expr0.0  
 * unop_exp: unop_exp.0  simpleexp  
 * arith_expr1: arith_expr0  arith_expr1.0  
 * arith_expr0.0: ε  
 * arith_expr0.0: binop0  unop_exp  
 * arith_expr0.0: arith_expr0.0  binop0  unop_exp  
 * arith_expr2: arith_expr1  arith_expr2.0  
 * arith_expr1.0: ε  
 * arith_expr1.0: binop1  arith_expr0  
 * arith_expr1.0: arith_expr1.0  binop1  arith_expr0  
 * arith_expr3: arith_expr2  arith_expr3.0  
 * arith_expr2.0: ε  
 * arith_expr2.0: binop2  arith_expr1  
 * arith_expr2.0: arith_expr2.0  binop2  arith_expr1  
 * arith_expr4: arith_expr3  arith_expr4.0  
 * arith_expr3.0: ε  
 * arith_expr3.0: binop3  arith_expr2  
 * arith_expr3.0: arith_expr3.0  binop3  arith_expr2  
 * arith_expr5: arith_expr4  arith_expr5.0  
 * arith_expr4.0: ε  
 * arith_expr4.0: binop4  arith_expr3  
 * arith_expr4.0: arith_expr4.0  binop4  arith_expr3  
 * arith_expr6: arith_expr5  arith_expr6.0  
 * arith_expr5.0: ε  
 * arith_expr5.0: binop5  arith_expr4  
 * arith_expr5.0: arith_expr5.0  binop5  arith_expr4  
 * arith_expr7: arith_expr6  arith_expr7.0  
 * arith_expr6.0: ε  
 * arith_expr6.0: binop6  arith_expr5  
 * arith_expr6.0: arith_expr6.0  binop6  arith_expr5  
 * arith_expr8: arith_expr7  arith_expr8.0  
 * arith_expr7.0: ε  
 * arith_expr7.0: binop7  arith_expr6  
 * arith_expr7.0: arith_expr7.0  binop7  arith_expr6  
 * arith_expr8.0: ε  
 * arith_expr8.0: binop8  arith_expr7  
 * arith_expr8.0: arith_expr8.0  binop8  arith_expr7  
 * simpleexp: suffixedexp  
 * simpleexp: functiondef  
 * simpleexp: listconstructor  
 * simpleexp: mapconstructor  
 * simpleexp: NUM  
 * simpleexp: BOOL  
 * simpleexp: STRING  
 * unop_exp.0: unop  
 * unop_exp.0: ε  
 * suffixedexp: primaryexp  suffixedexp.0  
 * assignment: assignment.0  '=' explist  
 * exprstat.0: assignment  
 * exprstat.0: ε  
 * assignment.0: ε  
 * assignment.0: ',' suffixedexp  
 * assignment.0: assignment.0  ',' suffixedexp  
 * ifstat.0: ε  
 * ifstat.0: 'elif' exp  block  
 * ifstat.0: ifstat.0  'elif' exp  block  
 * ifstat.1: ε  
 * ifstat.1: 'else' block  
 * dot_name: NAME  dot_name.0  
 * dot_name.0: ε  
 * dot_name.0: '.' NAME  
 * dot_name.0: dot_name.0  '.' NAME  
 * importstat.0: ε  
 * importstat.0: ':' namelist  
 * namelist: NAME  namelist.0  
 * importstat.1: ε  
 * importstat.1: 'as' namelist  
 * retstat.0: explist  
 * retstat.0: ε  
 * funcname: NAME  funcname.0  
 * funcbody: '(' funcbody.0  ')' block  
 * namelist.0: ε  
 * namelist.0: ',' NAME  
 * namelist.0: namelist.0  ',' NAME  
 * funcname.0: ε  
 * funcname.0: '.' NAME  
 * funcname.0: funcname.0  '.' NAME  
 * functiondef: 'func' funcbody  
 * listconstructor: '[' listconstructor.0  ']' 
 * mapconstructor: '{' mapconstructor.0  '}' 
 * fieldlist: field  fieldlist.0  fieldlist.1  
 * mapconstructor.0: fieldlist  
 * mapconstructor.0: ε  
 * listconstructor.0: explist  
 * listconstructor.0: ε  
 * field: NAME  ':' exp  
 * fieldlist.0: ε  
 * fieldlist.0: ',' field  
 * fieldlist.0: fieldlist.0  ',' field  
 * fieldlist.1: ε  
 * fieldlist.1: ',' 
 * parlist: namelist  parlist.0  
 * funcbody.0: parlist  
 * funcbody.0: ε  
 * parlist.0: ε  
 * parlist.0: '...' NAME  
 * parlist.0: ',' '...' NAME  
 * block.0: statlist  
 * block.0: ε  
 * statlist.0: NLINE  
 * statlist.0: ε  
 * statlist.1: ε  
 * statlist.1: NLINE  STAT  
 * statlist.1: statlist.1  NLINE  STAT  
 * statlist.2: NLINE  
 * statlist.2: ε  
 * primaryexp: NAME  
 * primaryexp: '(' exp  ')' 
 * fieldsel: '.' NAME  
 * yindex: '[' exp  ']' 
 * funcargs: '(' funcargs.0  ')' 
 * suffixedexp.0: suffixedexp.0.0  
 * suffixedexp.0: ε  
 * suffixedexp.0: suffixedexp.0  suffixedexp.0.0  
 * suffixedexp.0.0: fieldsel  
 * suffixedexp.0.0: yindex  
 * suffixedexp.0.0: funcargs  
 * funcargs.0: explist  
 * funcargs.0: ε  
 */