/*
 *  this is generated by code.
 *  If you want to modify, please modify the source code.
 *
 *  Author: WanQing<1109162935@qq.com>
 *
 *
 *  A table of symbol transfer
 *  char  string
 *  -------------
 *  '+' | "ADD"
 *  '.' | "DOT"
 *  '-' | "SUB"
 *  '*' | "MUL"
 *  '/' | "DIV"
 *  '%' | "MOD"
 *  '&' | "AND"
 *  '^' | "XOR"
 *  '!' | "INV"
 *  '?' | "QUE"
 *  '~' | "NOT"
 *  '{' | "BBL"
 *  '}' | "BBR"
 *  '[' | "MBL"
 *  ']' | "MBR"
 *  '(' | "SBL"
 *  ')' | "SBR"
 *  ',' | "COM"
 *  '$' | "END"
 *  ':' | "COL"
 *  'ε' | "NIL"
 *  '@' | "AT"
 *  '|' | "OR"
 *  '>' | "GT"
 *  '<' | "LT"
 *  '=' | "EQ"
 *  -------------
 */
#ifndef INCLUDE_TYPEWORD_H_
#define INCLUDE_TYPEWORD_H_
#define TFLAG (1<<20)

typedef enum {
	TW_START, // START
	TW_STAT, // STAT
	TW_NAME, // NAME
	TW_NUM, // NUM
	TW_BOOL, // BOOL
	TW_STRING, // STRING
	TW_END, // $
	TW_NULL, // NULL
	TW_NLINE, // NLINE
	TW_NIL, // ε
	TW_statlist, // statlist
	TW_ifstat, // ifstat
	TW_whilestat, // whilestat
	TW_block, // block
	TW_localstat, // localstat
	TW_funcstat, // funcstat
	TW_globalstat, // globalstat
	TW_exprstat, // exprstat
	TW_importstat, // importstat
	TW_explist, // explist
	TW_exp, // exp
	TW_COM, // ,
	TW_unop, // unop
	TW_explist_DOT_0, // explist.0
	TW_SUB, // -
	TW_not, // not
	TW_NOT, // ~
	TW_binop0, // binop0
	TW_MUL_MUL, // **
	TW_binop1, // binop1
	TW_DIV, // /
	TW_DIV_DIV, // //
	TW_MOD, // %
	TW_MUL, // *
	TW_binop2, // binop2
	TW_ADD, // +
	TW_binop3, // binop3
	TW_GT_GT, // >>
	TW_LT_LT, // <<
	TW_binop4, // binop4
	TW_LT, // <
	TW_LT_EQ, // <=
	TW_GT, // >
	TW_GT_EQ, // >=
	TW_EQ_EQ, // ==
	TW_INV_EQ, // !=
	TW_binop5, // binop5
	TW_XOR, // ^
	TW_AND, // &
	TW_OR, // |
	TW_binop6, // binop6
	TW_and, // and
	TW_binop7, // binop7
	TW_or, // or
	TW_binop8, // binop8
	TW_EQ, // =
	TW_ADD_EQ, // +=
	TW_SUB_EQ, // -=
	TW_MUL_EQ, // *=
	TW_DIV_EQ, // /=
	TW_MOD_EQ, // %=
	TW_AND_EQ, // &=
	TW_OR_EQ, // |=
	TW_XOR_EQ, // ^=
	TW_LT_LT_EQ, // <<=
	TW_GT_GT_EQ, // >>=
	TW_MUL_MUL_EQ, // **=
	TW_DIV_DIV_EQ, // //=
	TW_arith_expr0, // arith_expr0
	TW_unop_exp, // unop_exp
	TW_arith_expr1, // arith_expr1
	TW_arith_expr0_DOT_0, // arith_expr0.0
	TW_arith_expr2, // arith_expr2
	TW_arith_expr1_DOT_0, // arith_expr1.0
	TW_arith_expr3, // arith_expr3
	TW_arith_expr2_DOT_0, // arith_expr2.0
	TW_arith_expr4, // arith_expr4
	TW_arith_expr3_DOT_0, // arith_expr3.0
	TW_arith_expr5, // arith_expr5
	TW_arith_expr4_DOT_0, // arith_expr4.0
	TW_arith_expr6, // arith_expr6
	TW_arith_expr5_DOT_0, // arith_expr5.0
	TW_arith_expr7, // arith_expr7
	TW_arith_expr6_DOT_0, // arith_expr6.0
	TW_arith_expr8, // arith_expr8
	TW_arith_expr7_DOT_0, // arith_expr7.0
	TW_arith_expr8_DOT_0, // arith_expr8.0
	TW_simpleexp, // simpleexp
	TW_unop_exp_DOT_0, // unop_exp.0
	TW_suffixedexp, // suffixedexp
	TW_assignment, // assignment
	TW_exprstat_DOT_0, // exprstat.0
	TW_assignment_DOT_0, // assignment.0
	TW_if, // if
	TW_ifstat_DOT_0, // ifstat.0
	TW_elif, // elif
	TW_ifstat_DOT_1, // ifstat.1
	TW_else, // else
	TW_while, // while
	TW_dot_name, // dot_name
	TW_DOT, // .
	TW_dot_name_DOT_0, // dot_name.0
	TW_import, // import
	TW_importstat_DOT_0, // importstat.0
	TW_COL, // :
	TW_namelist, // namelist
	TW_importstat_DOT_1, // importstat.1
	TW_as, // as
	TW_retstat, // retstat
	TW_retstat_DOT_0, // retstat.0
	TW_func, // func
	TW_funcname, // funcname
	TW_funcbody, // funcbody
	TW_namelist_DOT_0, // namelist.0
	TW_var, // var
	TW_global, // global
	TW_funcname_DOT_0, // funcname.0
	TW_functiondef, // functiondef
	TW_listconstructor, // listconstructor
	TW_mapconstructor, // mapconstructor
	TW_BBL, // {
	TW_fieldlist, // fieldlist
	TW_BBR, // }
	TW_mapconstructor_DOT_0, // mapconstructor.0
	TW_MBL, // [
	TW_MBR, // ]
	TW_listconstructor_DOT_0, // listconstructor.0
	TW_field, // field
	TW_fieldlist_DOT_0, // fieldlist.0
	TW_fieldlist_DOT_1, // fieldlist.1
	TW_SBL, // (
	TW_parlist, // parlist
	TW_SBR, // )
	TW_funcbody_DOT_0, // funcbody.0
	TW_DOT_DOT_DOT, // ...
	TW_parlist_DOT_0, // parlist.0
	TW_block_DOT_0, // block.0
	TW_statlist_DOT_0, // statlist.0
	TW_statlist_DOT_1, // statlist.1
	TW_statlist_DOT_2, // statlist.2
	TW_primaryexp, // primaryexp
	TW_fieldsel, // fieldsel
	TW_yindex, // yindex
	TW_funcargs, // funcargs
	TW_suffixedexp_DOT_0, // suffixedexp.0
	TW_suffixedexp_DOT_0_DOT_0, // suffixedexp.0.0
	TW_funcargs_DOT_0, // funcargs.0
} TypeWord;

typedef enum {
	WI_START = TW_START, // START
	WI_STAT = TW_STAT, // STAT
	WI_statlist = TW_statlist, // statlist
	WI_ifstat = TW_ifstat, // ifstat
	WI_whilestat = TW_whilestat, // whilestat
	WI_block = TW_block, // block
	WI_localstat = TW_localstat, // localstat
	WI_funcstat = TW_funcstat, // funcstat
	WI_globalstat = TW_globalstat, // globalstat
	WI_exprstat = TW_exprstat, // exprstat
	WI_importstat = TW_importstat, // importstat
	WI_explist = TW_explist, // explist
	WI_exp = TW_exp, // exp
	WI_unop = TW_unop, // unop
	WI_explist_DOT_0 = TW_explist_DOT_0, // explist.0
	WI_binop0 = TW_binop0, // binop0
	WI_binop1 = TW_binop1, // binop1
	WI_binop2 = TW_binop2, // binop2
	WI_binop3 = TW_binop3, // binop3
	WI_binop4 = TW_binop4, // binop4
	WI_binop5 = TW_binop5, // binop5
	WI_binop6 = TW_binop6, // binop6
	WI_binop7 = TW_binop7, // binop7
	WI_binop8 = TW_binop8, // binop8
	WI_arith_expr0 = TW_arith_expr0, // arith_expr0
	WI_unop_exp = TW_unop_exp, // unop_exp
	WI_arith_expr1 = TW_arith_expr1, // arith_expr1
	WI_arith_expr0_DOT_0 = TW_arith_expr0_DOT_0, // arith_expr0.0
	WI_arith_expr2 = TW_arith_expr2, // arith_expr2
	WI_arith_expr1_DOT_0 = TW_arith_expr1_DOT_0, // arith_expr1.0
	WI_arith_expr3 = TW_arith_expr3, // arith_expr3
	WI_arith_expr2_DOT_0 = TW_arith_expr2_DOT_0, // arith_expr2.0
	WI_arith_expr4 = TW_arith_expr4, // arith_expr4
	WI_arith_expr3_DOT_0 = TW_arith_expr3_DOT_0, // arith_expr3.0
	WI_arith_expr5 = TW_arith_expr5, // arith_expr5
	WI_arith_expr4_DOT_0 = TW_arith_expr4_DOT_0, // arith_expr4.0
	WI_arith_expr6 = TW_arith_expr6, // arith_expr6
	WI_arith_expr5_DOT_0 = TW_arith_expr5_DOT_0, // arith_expr5.0
	WI_arith_expr7 = TW_arith_expr7, // arith_expr7
	WI_arith_expr6_DOT_0 = TW_arith_expr6_DOT_0, // arith_expr6.0
	WI_arith_expr8 = TW_arith_expr8, // arith_expr8
	WI_arith_expr7_DOT_0 = TW_arith_expr7_DOT_0, // arith_expr7.0
	WI_arith_expr8_DOT_0 = TW_arith_expr8_DOT_0, // arith_expr8.0
	WI_simpleexp = TW_simpleexp, // simpleexp
	WI_unop_exp_DOT_0 = TW_unop_exp_DOT_0, // unop_exp.0
	WI_suffixedexp = TW_suffixedexp, // suffixedexp
	WI_assignment = TW_assignment, // assignment
	WI_exprstat_DOT_0 = TW_exprstat_DOT_0, // exprstat.0
	WI_assignment_DOT_0 = TW_assignment_DOT_0, // assignment.0
	WI_ifstat_DOT_0 = TW_ifstat_DOT_0, // ifstat.0
	WI_ifstat_DOT_1 = TW_ifstat_DOT_1, // ifstat.1
	WI_dot_name = TW_dot_name, // dot_name
	WI_dot_name_DOT_0 = TW_dot_name_DOT_0, // dot_name.0
	WI_importstat_DOT_0 = TW_importstat_DOT_0, // importstat.0
	WI_namelist = TW_namelist, // namelist
	WI_importstat_DOT_1 = TW_importstat_DOT_1, // importstat.1
	WI_retstat = TW_retstat, // retstat
	WI_retstat_DOT_0 = TW_retstat_DOT_0, // retstat.0
	WI_funcname = TW_funcname, // funcname
	WI_funcbody = TW_funcbody, // funcbody
	WI_namelist_DOT_0 = TW_namelist_DOT_0, // namelist.0
	WI_funcname_DOT_0 = TW_funcname_DOT_0, // funcname.0
	WI_functiondef = TW_functiondef, // functiondef
	WI_listconstructor = TW_listconstructor, // listconstructor
	WI_mapconstructor = TW_mapconstructor, // mapconstructor
	WI_fieldlist = TW_fieldlist, // fieldlist
	WI_mapconstructor_DOT_0 = TW_mapconstructor_DOT_0, // mapconstructor.0
	WI_listconstructor_DOT_0 = TW_listconstructor_DOT_0, // listconstructor.0
	WI_field = TW_field, // field
	WI_fieldlist_DOT_0 = TW_fieldlist_DOT_0, // fieldlist.0
	WI_fieldlist_DOT_1 = TW_fieldlist_DOT_1, // fieldlist.1
	WI_parlist = TW_parlist, // parlist
	WI_funcbody_DOT_0 = TW_funcbody_DOT_0, // funcbody.0
	WI_parlist_DOT_0 = TW_parlist_DOT_0, // parlist.0
	WI_block_DOT_0 = TW_block_DOT_0, // block.0
	WI_statlist_DOT_0 = TW_statlist_DOT_0, // statlist.0
	WI_statlist_DOT_1 = TW_statlist_DOT_1, // statlist.1
	WI_statlist_DOT_2 = TW_statlist_DOT_2, // statlist.2
	WI_primaryexp = TW_primaryexp, // primaryexp
	WI_fieldsel = TW_fieldsel, // fieldsel
	WI_yindex = TW_yindex, // yindex
	WI_funcargs = TW_funcargs, // funcargs
	WI_suffixedexp_DOT_0 = TW_suffixedexp_DOT_0, // suffixedexp.0
	WI_suffixedexp_DOT_0_DOT_0 = TW_suffixedexp_DOT_0_DOT_0, // suffixedexp.0.0
	WI_funcargs_DOT_0 = TW_funcargs_DOT_0, // funcargs.0
	WI_NAME = TFLAG | TW_NAME, // NAME
	WI_NUM = TFLAG | TW_NUM, // NUM
	WI_BOOL = TFLAG | TW_BOOL, // BOOL
	WI_STRING = TFLAG | TW_STRING, // STRING
	WI_END = TFLAG | TW_END, // $
	WI_NULL = TFLAG | TW_NULL, // NULL
	WI_NLINE = TFLAG | TW_NLINE, // NLINE
	WI_NIL = TFLAG | TW_NIL, // ε
	WI_COM = TFLAG | TW_COM, // ,
	WI_SUB = TFLAG | TW_SUB, // -
	WI_not = TFLAG | TW_not, // not
	WI_NOT = TFLAG | TW_NOT, // ~
	WI_MUL_MUL = TFLAG | TW_MUL_MUL, // **
	WI_DIV = TFLAG | TW_DIV, // /
	WI_DIV_DIV = TFLAG | TW_DIV_DIV, // //
	WI_MOD = TFLAG | TW_MOD, // %
	WI_MUL = TFLAG | TW_MUL, // *
	WI_ADD = TFLAG | TW_ADD, // +
	WI_GT_GT = TFLAG | TW_GT_GT, // >>
	WI_LT_LT = TFLAG | TW_LT_LT, // <<
	WI_LT = TFLAG | TW_LT, // <
	WI_LT_EQ = TFLAG | TW_LT_EQ, // <=
	WI_GT = TFLAG | TW_GT, // >
	WI_GT_EQ = TFLAG | TW_GT_EQ, // >=
	WI_EQ_EQ = TFLAG | TW_EQ_EQ, // ==
	WI_INV_EQ = TFLAG | TW_INV_EQ, // !=
	WI_XOR = TFLAG | TW_XOR, // ^
	WI_AND = TFLAG | TW_AND, // &
	WI_OR = TFLAG | TW_OR, // |
	WI_and = TFLAG | TW_and, // and
	WI_or = TFLAG | TW_or, // or
	WI_EQ = TFLAG | TW_EQ, // =
	WI_ADD_EQ = TFLAG | TW_ADD_EQ, // +=
	WI_SUB_EQ = TFLAG | TW_SUB_EQ, // -=
	WI_MUL_EQ = TFLAG | TW_MUL_EQ, // *=
	WI_DIV_EQ = TFLAG | TW_DIV_EQ, // /=
	WI_MOD_EQ = TFLAG | TW_MOD_EQ, // %=
	WI_AND_EQ = TFLAG | TW_AND_EQ, // &=
	WI_OR_EQ = TFLAG | TW_OR_EQ, // |=
	WI_XOR_EQ = TFLAG | TW_XOR_EQ, // ^=
	WI_LT_LT_EQ = TFLAG | TW_LT_LT_EQ, // <<=
	WI_GT_GT_EQ = TFLAG | TW_GT_GT_EQ, // >>=
	WI_MUL_MUL_EQ = TFLAG | TW_MUL_MUL_EQ, // **=
	WI_DIV_DIV_EQ = TFLAG | TW_DIV_DIV_EQ, // //=
	WI_if = TFLAG | TW_if, // if
	WI_elif = TFLAG | TW_elif, // elif
	WI_else = TFLAG | TW_else, // else
	WI_while = TFLAG | TW_while, // while
	WI_DOT = TFLAG | TW_DOT, // .
	WI_import = TFLAG | TW_import, // import
	WI_COL = TFLAG | TW_COL, // :
	WI_as = TFLAG | TW_as, // as
	WI_func = TFLAG | TW_func, // func
	WI_var = TFLAG | TW_var, // var
	WI_global = TFLAG | TW_global, // global
	WI_BBL = TFLAG | TW_BBL, // {
	WI_BBR = TFLAG | TW_BBR, // }
	WI_MBL = TFLAG | TW_MBL, // [
	WI_MBR = TFLAG | TW_MBR, // ]
	WI_SBL = TFLAG | TW_SBL, // (
	WI_SBR = TFLAG | TW_SBR, // )
	WI_DOT_DOT_DOT = TFLAG | TW_DOT_DOT_DOT, // ...
} WordID;

#endif /* INCLUDE_TYPEWORD_H_ */